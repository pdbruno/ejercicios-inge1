

----QUIT----(11 September 2022 19:10:09) CuisUniversity-5481.image priorSource: 2810882!

----STARTUP---- (11 September 2022 19:10:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5481.image!


----QUIT----(11 September 2022 19:10:10) CuisUniversity-5481.image priorSource: 7059465!

----STARTUP---- (3 November 2022 19:22:29) as C:\Users\Patricio\Desktop\windows64\CuisUniversity-5481.image!


----End fileIn of C:\Users\Patricio\Desktop\TusLibros-33.st----!

Object subclass: #StoreController
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreController category: 'TusLibros' stamp: 'pdb 11/3/2022 19:32:37'!
Object subclass: #StoreController
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #StoreControllerTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreControllerTest category: 'TusLibros' stamp: 'pdb 11/3/2022 19:32:58'!
TestCase subclass: #StoreControllerTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreControllerTest methodsFor: 'tests' stamp: 'pdb 11/3/2022 19:41:19'!
test01ValidIdAndPasswordCreatesCartSuccessfully

	| controller variable |
	controller := StoreController withMP: self AndClientAuthenticator: self.
	! !
!StoreControllerTest methodsFor: 'tests' stamp: 'pdb 11/3/2022 19:41:32' prior: 50552849!
test01ValidIdAndPasswordCreatesCartSuccessfully

	| controller |
	controller := StoreController withMP: self AndClientAuthenticator: self.
	! !
!StoreControllerTest methodsFor: 'tests' stamp: 'pdb 11/3/2022 19:42:02' prior: 50552857!
test01ValidIdAndPasswordCreatesCartSuccessfully

	
	! !

TestCase subclass: #StoreControllerTest
	instanceVariableNames: 'controller'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreControllerTest category: 'TusLibros' stamp: 'pdb 11/3/2022 19:42:10'!
TestCase subclass: #StoreControllerTest
	instanceVariableNames: 'controller'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreControllerTest methodsFor: 'setUp/tearDown' stamp: 'pdb 11/3/2022 19:42:33' overrides: 16961394!
setUp
	controller := StoreController withMP: self AndClientAuthenticator: self.! !
!StoreControllerTest methodsFor: 'tests' stamp: 'pdb 11/3/2022 19:45:23' prior: 50552865!
test01ValidIdAndPasswordCreatesCartSuccessfully

	controller createCartWithId: 7 andPassword: 'mengolini'
	! !
!StoreControllerTest methodsFor: 'support' stamp: 'pdb 11/3/2022 19:45:59'!
validClientId
	^'catramado'! !
!StoreControllerTest methodsFor: 'support' stamp: 'pdb 11/3/2022 19:46:11'!
validClientPassword
	^'culiiiii'! !
!StoreControllerTest methodsFor: 'tests' stamp: 'pdb 11/3/2022 19:48:35' prior: 50552889!
test01ValidIdAndPasswordCreatesCartSuccessfully

	controller createCartWithId: self validClientId andPassword: self validClientPassword 
	! !
!StoreControllerTest methodsFor: 'tests' stamp: 'pdb 11/3/2022 19:54:46' prior: 50552903!
test01ValidIdAndPasswordCreatesCartSuccessfully

	| cartId |
	cartId := controller createCartWithId: self validClientId andPassword: self validClientPassword.
	self assert: (controller listCart: cartId) isEmpty! !
!StoreController class methodsFor: 'instance creation' stamp: 'pdb 11/3/2022 19:57:17'!
withMP: aStoreControllerTest AndClientAuthenticator: aStoreControllerTest2 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithMP: aStoreControllerTest AndClientAuthenticator: aStoreControllerTest2 ! !
!StoreController class methodsFor: 'instance creation' stamp: 'pdb 11/3/2022 19:57:51' prior: 50552921!
withMP: aMerchantProcessor AndClientAuthenticator: aClientAuthenticator 

	^self new initializeWithMP: aMerchantProcessor AndClientAuthenticator: aClientAuthenticator ! !

!classDefinition: #StoreController category: 'TusLibros' stamp: 'pdb 11/3/2022 19:58:28'!
Object subclass: #StoreController
	instanceVariableNames: 'merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreController category: 'TusLibros' stamp: 'pdb 11/3/2022 19:58:28'!
Object subclass: #StoreController
	instanceVariableNames: 'merchantProcessor clientAuthenticator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreController methodsFor: 'initialization' stamp: 'pdb 11/3/2022 19:58:28'!
initializeWithMP: aMerchantProcessor AndClientAuthenticator: aClientAuthenticator 
	self shouldBeImplemented.
	merchantProcessor := aMerchantProcessor.
	clientAuthenticator := aClientAuthenticator.! !
!StoreController methodsFor: 'initialization' stamp: 'pdb 11/3/2022 19:58:31' prior: 50552957!
initializeWithMP: aMerchantProcessor AndClientAuthenticator: aClientAuthenticator 

	merchantProcessor := aMerchantProcessor.
	clientAuthenticator := aClientAuthenticator.! !

!testRun: #StoreControllerTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'pdb 11/3/2022 19:58:35'!
ERROR!
!StoreController methodsFor: 'creating' stamp: 'pdb 11/3/2022 19:58:55'!
createCartWithId: aString andPassword: aString2 
	self shouldBeImplemented.! !
!StoreController methodsFor: 'creating' stamp: 'pdb 11/3/2022 19:59:26' prior: 50552979!
createCartWithId: aUserId andPassword: aPassword 
	self shouldBeImplemented.! !

!classDefinition: #StoreController category: 'TusLibros' stamp: 'pdb 11/3/2022 20:02:29'!
Object subclass: #StoreController
	instanceVariableNames: 'merchantProcessor clientAuthenticator usersCarts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreController methodsFor: 'initialization' stamp: 'pdb 11/3/2022 20:02:25' prior: 50552967!
initializeWithMP: aMerchantProcessor AndClientAuthenticator: aClientAuthenticator 

	merchantProcessor := aMerchantProcessor.
	clientAuthenticator := aClientAuthenticator.
	usersCarts := Dictionary new.! !

!testRun: #StoreControllerTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'pdb 11/3/2022 20:02:37'!
ERROR!
!StoreController methodsFor: 'creating' stamp: 'pdb 11/3/2022 20:03:57' prior: 50552985!
createCartWithId: aUserId andPassword: aPassword 
	
	! !

Object subclass: #StoreController
	instanceVariableNames: 'merchantProcessor clientAuthenticator carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreController category: 'TusLibros' stamp: 'pdb 11/3/2022 20:04:02'!
Object subclass: #StoreController
	instanceVariableNames: 'merchantProcessor clientAuthenticator carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreController methodsFor: 'initialization' stamp: 'pdb 11/3/2022 20:04:10' prior: 50552999!
initializeWithMP: aMerchantProcessor AndClientAuthenticator: aClientAuthenticator 

	merchantProcessor := aMerchantProcessor.
	clientAuthenticator := aClientAuthenticator.
	carts := Dictionary new.! !

----End fileIn of C:\Users\Patricio\Desktop\windows64\Packages\TerseGuide.pck.st----!
!StoreController methodsFor: 'creating' stamp: 'pdb 11/3/2022 20:05:19' prior: 50553012!
createCartWithId: aUserId andPassword: aPassword 
	
	carts add: 1->Cart new.! !

Object subclass: #Store
	instanceVariableNames: 'merchantProcessor clientAuthenticator carts catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Store category: 'TusLibros' stamp: 'pdb 11/3/2022 20:09:21'!
Object subclass: #Store
	instanceVariableNames: 'merchantProcessor clientAuthenticator carts catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreController category: 'TusLibros' stamp: 'pdb 11/3/2022 20:10:07'!
Object subclass: #StoreController
	instanceVariableNames: 'merchantProcessor clientAuthenticator carts store'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreController methodsFor: 'initialization' stamp: 'pdb 11/3/2022 20:10:02' prior: 50553031!
initializeWithMP: aMerchantProcessor AndClientAuthenticator: aClientAuthenticator 

	merchantProcessor := aMerchantProcessor.
	clientAuthenticator := aClientAuthenticator.
	store := Store withMerchantProcessor:aMerchantProcessor andClientAuthenticator: aClientAuthenticator.! !
!Store class methodsFor: 'instance creation' stamp: 'pdb 11/3/2022 20:10:23'!
withMerchantProcessor: aStoreControllerTest andClientAuthenticator: aStoreControllerTest2 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithMerchantProcessor: aStoreControllerTest andClientAuthenticator: aStoreControllerTest2 ! !
!Store class methodsFor: 'instance creation' stamp: 'pdb 11/3/2022 20:11:05' prior: 50556000!
withMerchantProcessor: aMerchantProcessor andClientAuthenticator: aClientAuthenticator 


	^self new initializeWithMerchantProcessor: aMerchantProcessor andClientAuthenticator: aClientAuthenticator ! !
!Store methodsFor: 'initialization' stamp: 'pdb 11/3/2022 20:11:21'!
initializeWithMerchantProcessor: aMerchantProcessor andClientAuthenticator: aClientAuthenticator 
	self shouldBeImplemented.
	merchantProcessor := aMerchantProcessor.
	clientAuthenticator := aClientAuthenticator.! !

Object subclass: #StoreInterface
	instanceVariableNames: 'merchantProcessor clientAuthenticator carts store'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'pdb 11/3/2022 20:16:41'!
Object subclass: #StoreInterface
	instanceVariableNames: 'merchantProcessor clientAuthenticator carts store'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreControllerTest methodsFor: 'setUp/tearDown' stamp: 'pdb 11/3/2022 20:16:57' prior: 50552883 overrides: 16961394!
setUp
	controller := StoreInterface withMP: self AndClientAuthenticator: self.! !

!classDefinition: #StoreControllerTest category: 'TusLibros' stamp: 'pdb 11/3/2022 20:17:05'!
TestCase subclass: #StoreControllerTest
	instanceVariableNames: 'controller interface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreControllerTest methodsFor: 'setUp/tearDown' stamp: 'pdb 11/3/2022 20:17:01' prior: 50556047 overrides: 16961394!
setUp
	interface := StoreInterface withMP: self AndClientAuthenticator: self.! !

!classRemoval: #StoreController stamp: 'pdb 11/3/2022 20:17:16'!
Object subclass: #StoreController
	instanceVariableNames: 'merchantProcessor clientAuthenticator carts store'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #StoreInterfaceTest
	instanceVariableNames: 'controller interface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreInterfaceTest category: 'TusLibros' stamp: 'pdb 11/3/2022 20:17:54'!
TestCase subclass: #StoreInterfaceTest
	instanceVariableNames: 'controller interface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #StoreControllerTest stamp: 'pdb 11/3/2022 20:17:59'!
TestCase subclass: #StoreControllerTest
	instanceVariableNames: 'controller interface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Store stamp: 'pdb 11/3/2022 20:35:01'!
Object subclass: #Store
	instanceVariableNames: 'merchantProcessor clientAuthenticator carts catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'pdb 11/3/2022 20:35:23'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'pdb 11/3/2022 20:35:23'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'pdb 11/3/2022 20:35:23'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'pdb 11/3/2022 20:35:23'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'pdb 11/3/2022 20:35:23'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'pdb 11/3/2022 20:35:23'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'pdb 11/3/2022 20:35:23'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'pdb 11/3/2022 20:35:23'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'pdb 11/3/2022 20:35:23'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'pdb 11/3/2022 20:35:23'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'pdb 11/3/2022 20:35:23'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'pdb 11/3/2022 20:35:23'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'pdb 11/3/2022 20:35:23'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'pdb 11/3/2022 20:35:23'!
PASSED!
!StoreInterfaceTest methodsFor: 'no messages' stamp: 'pdb 11/3/2022 20:41:00'!
validClientPassword
	
	^'culiiiii'! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'pdb 11/3/2022 20:42:12'!
test01ValidIdAndPasswordCreatesCartSuccessfully

	| cartId |
	cartId := controller createCartWithId: self validClientId andPassword: self validClientPassword.
	self assert: (controller listCart: cartId) isEmpty! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'pdb 11/3/2022 20:42:27'!
validClientId
	^'catramado'! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'pdb 11/3/2022 20:42:54' overrides: 16961394!
setUp
	controller := StoreInterface withMP: self AndClientAuthenticator: self.! !

TestCase subclass: #StoreInterfaceTest
	instanceVariableNames: 'controller'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreInterfaceTest category: 'TusLibros' stamp: 'pdb 11/3/2022 20:43:42'!
TestCase subclass: #StoreInterfaceTest
	instanceVariableNames: 'controller'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreInterfaceTest category: 'TusLibros' stamp: 'pdb 11/3/2022 20:43:58'!
TestCase subclass: #StoreInterfaceTest
	instanceVariableNames: 'interface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'pdb 11/3/2022 20:43:58' prior: 50556167 overrides: 16961394!
setUp
	interface := StoreInterface withMP: self AndClientAuthenticator: self.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'pdb 11/3/2022 20:43:58' prior: 50556152!
test01ValidIdAndPasswordCreatesCartSuccessfully

	| cartId |
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	self assert: (interface listCart: cartId) isEmpty! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'pdb 11/3/2022 20:44:30' prior: 50556193 overrides: 16961394!
setUp
	interface := StoreInterface withMP: self clientAuthenticator: self andCatalog: self createCatalog.! !
!StoreInterfaceTest methodsFor: 'support' stamp: 'pdb 11/3/2022 20:44:55'!
createCatalog
	self shouldBeImplemented.! !

!classDefinition: #StoreInterfaceTest category: 'TusLibros' stamp: 'pdb 11/3/2022 20:46:28'!
TestCase subclass: #StoreInterfaceTest
	instanceVariableNames: 'interface testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'pdb 11/3/2022 20:46:27' prior: 50556210 overrides: 16961394!
setUp
	interface := StoreInterface withMP: self clientAuthenticator: self andCatalog: self createCatalog.
	testObjectsFactory := StoreTestObjectsFactory new.! !
!StoreInterfaceTest methodsFor: 'setUp/tearDown' stamp: 'pdb 11/3/2022 20:47:05' prior: 50556230 overrides: 16961394!
setUp
	
	testObjectsFactory := StoreTestObjectsFactory new.
	interface := StoreInterface withMP: self clientAuthenticator: self andCatalog: testObjectsFactory defaultCatalog.! !
!StoreInterface class methodsFor: 'instance creation' stamp: 'pdb 11/3/2022 20:47:13'!
withMP: aStoreInterfaceTest clientAuthenticator: aStoreInterfaceTest2 andCatalog: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithMP: aStoreInterfaceTest clientAuthenticator: aStoreInterfaceTest2 andCatalog: aDictionary ! !
!StoreInterface class methodsFor: 'instance creation' stamp: 'pdb 11/3/2022 20:47:41' prior: 50556248!
withMP: aMerchantProcessor clientAuthenticator: aClientAuthenticator andCatalog: aCatalog 

	^self new initializeWithMP: aMerchantProcessor clientAuthenticator: aClientAuthenticator andCatalog: aCatalog ! !

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'pdb 11/3/2022 20:47:58'!
Object subclass: #StoreInterface
	instanceVariableNames: 'merchantProcessor clientAuthenticator carts store catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'initialization' stamp: 'pdb 11/3/2022 20:47:58'!
initializeWithMP: aMerchantProcessor clientAuthenticator: aClientAuthenticator andCatalog: aCatalog 
	self shouldBeImplemented.
	merchantProcessor := aMerchantProcessor.
	clientAuthenticator := aClientAuthenticator.
	catalog := aCatalog.! !
!StoreInterface methodsFor: 'initialization' stamp: 'pdb 11/3/2022 20:48:07' prior: 50556279!
initializeWithMP: aMerchantProcessor clientAuthenticator: aClientAuthenticator andCatalog: aCatalog 
	merchantProcessor := aMerchantProcessor.
	clientAuthenticator := aClientAuthenticator.
	catalog := aCatalog.! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'pdb 11/3/2022 20:48:09'!
ERROR!
!StoreInterface methodsFor: 'interface' stamp: 'pdb 11/3/2022 20:48:36'!
createCartWithId: aString andPassword: aString2 
	self shouldBeImplemented.! !

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'pdb 11/3/2022 20:51:38'!
Object subclass: #StoreInterface
	instanceVariableNames: 'merchantProcessor clientAuthenticator carts store catalog cartSessions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'pdb 11/3/2022 20:51:39'!
Object subclass: #StoreInterface
	instanceVariableNames: 'merchantProcessor clientAuthenticator carts store catalog cartSessions idCounter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'interface' stamp: 'pdb 11/3/2022 20:51:31' prior: 50556303!
createCartWithId: aClientId andPassword: aPassword 
	
	self assertCorrectClientId: aClientId andPassword: aPassword.
	cartSessions add: (idCounter->Cart acceptingItemsOf: catalog).! !
!StoreInterface methodsFor: 'initialization' stamp: 'pdb 11/3/2022 20:52:38' prior: 50556290!
initializeWithMP: aMerchantProcessor clientAuthenticator: aClientAuthenticator andCatalog: aCatalog 
	merchantProcessor := aMerchantProcessor.
	clientAuthenticator := aClientAuthenticator.
	catalog := aCatalog.
	idCounter := 0
	! !
!StoreInterface methodsFor: 'initialization' stamp: 'pdb 11/3/2022 20:52:58' prior: 50556336!
initializeWithMP: aMerchantProcessor clientAuthenticator: aClientAuthenticator andCatalog: aCatalog 
	merchantProcessor := aMerchantProcessor.
	clientAuthenticator := aClientAuthenticator.
	catalog := aCatalog.
	idCounter := 0.
	cartSessions := Dictionary new.! !
!StoreInterface methodsFor: 'interface' stamp: 'pdb 11/3/2022 20:53:21' prior: 50556327!
createCartWithId: aClientId andPassword: aPassword 
	
	self assertCorrectClientId: aClientId andPassword: aPassword.
	idCounter := idCounter + 1
	cartSessions add: (idCounter->Cart acceptingItemsOf: catalog).
	^idCounter.! !
!StoreInterface methodsFor: 'interface' stamp: 'pdb 11/3/2022 20:53:37' prior: 50556359!
createCartWithId: aClientId andPassword: aPassword 
	
	self assertCorrectClientId: aClientId andPassword: aPassword.
	idCounter := idCounter + 1-
	cartSessions add: (idCounter->Cart acceptingItemsOf: catalog).
	^idCounter.! !
!StoreInterface methodsFor: 'interface' stamp: 'pdb 11/3/2022 20:53:38' prior: 50556369!
createCartWithId: aClientId andPassword: aPassword 
	
	self assertCorrectClientId: aClientId andPassword: aPassword.
	idCounter := idCounter + 1.
	cartSessions add: (idCounter->Cart acceptingItemsOf: catalog).
	^idCounter.! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'pdb 11/3/2022 20:53:44'!
ERROR!

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'pdb 11/3/2022 20:53:44'!
ERROR!
!StoreInterface methodsFor: 'authentication' stamp: 'pdb 11/3/2022 20:54:08'!
assertCorrectClientId: aString andPassword: aString2 
	self shouldBeImplemented.! !
!StoreInterface methodsFor: 'authentication' stamp: 'pdb 11/3/2022 20:55:10' prior: 50556396!
assertCorrectClientId: aString andPassword: aString2 
	clientAuthenticator authenticateClientId: aString andPassword: aString2.! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'pdb 11/3/2022 20:55:11'!
ERROR!
!StoreInterfaceTest methodsFor: 'support' stamp: 'pdb 11/3/2022 20:55:20'!
authenticateClientId: aString andPassword: aString2 
	self shouldBeImplemented.! !
!StoreInterfaceTest methodsFor: 'support' stamp: 'pdb 11/3/2022 20:56:37' prior: 50556413!
authenticateClientId: aClientId andPassword: aPassword 
	^aClientId = self validClientId  and: [aPassword = self validClientPassword ]! !
!StoreInterface methodsFor: 'authentication' stamp: 'pdb 11/3/2022 20:57:16' prior: 50556402!
assertCorrectClientId: aString andPassword: aString2 
	(clientAuthenticator authenticateClientId: aString andPassword: aString2) ifFalse: [self error: self class incorrectAuthenticationErrorMessage].! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'pdb 11/3/2022 20:57:19'!
ERROR!
!StoreInterface methodsFor: 'interface' stamp: 'pdb 11/3/2022 20:57:32' prior: 50556379!
createCartWithId: aClientId andPassword: aPassword 
	
	self assertCorrectClientId: aClientId andPassword: aPassword.
	idCounter := idCounter + 1.
	cartSessions add: (idCounter->(Cart acceptingItemsOf: catalog)).
	^idCounter.! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'pdb 11/3/2022 20:57:33'!
ERROR!
!StoreInterface methodsFor: 'initialization' stamp: 'pdb 11/3/2022 20:57:49'!
listCart: aSmallInteger 
	self shouldBeImplemented.! !
!Cart methodsFor: 'queries' stamp: 'pdb 11/3/2022 21:03:02'!
items

	^items copy! !
!StoreInterface methodsFor: 'initialization' stamp: 'pdb 11/3/2022 21:03:52' prior: 50556454!
listCart: aSmallInteger 
	^Dictionary new.! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'pdb 11/3/2022 21:03:54'!
PASSED!

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'pdb 11/3/2022 21:04:28'!
PASSED!
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'pdb 11/3/2022 21:05:51'!
test02InvalidIdAndPasswordThrowsError

	| cartId |
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	self assert: (interface listCart: cartId) isEmpty! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'pdb 11/3/2022 21:06:06' prior: 50556474!
test02InvalidIdAndPasswordThrowsError

	| cartId |
	cartId := interface createCartWithId: self invalidClientId andPassword: self invalidClientPassword.
	self assert: (interface listCart: cartId) isEmpty! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'pdb 11/3/2022 21:07:42' prior: 50556484!
test02InvalidIdAndPasswordThrowsError

	| cartId |
	cartId := 
	self should: [interface createCartWithId: self invalidClientId andPassword: self invalidClientPassword.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface class ! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'pdb 11/3/2022 21:07:51' prior: 50556494!
test02InvalidIdAndPasswordThrowsError

	self should: [interface createCartWithId: self invalidClientId andPassword: self invalidClientPassword.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface class ! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'pdb 11/3/2022 21:08:26' prior: 50556505!
test02InvalidIdAndPasswordThrowsError

	self should: [interface createCartWithId: self invalidClientId andPassword: self invalidClientPassword.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface class incorrectAuthenticationErrorMessage! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'pdb 11/3/2022 21:08:27' prior: 50556516!
test02InvalidIdAndPasswordThrowsError

	self should: [interface createCartWithId: self invalidClientId andPassword: self invalidClientPassword.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface class incorrectAuthenticationErrorMessage.! !

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'pdb 11/3/2022 21:08:29'!
ERROR!
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'pdb 11/3/2022 21:08:38' prior: 50556528!
test02InvalidIdAndPasswordThrowsError

	self should: [interface createCartWithId: self invalidClientId andPassword: self invalidClientPassword.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface incorrectAuthenticationErrorMessage.! !

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'pdb 11/3/2022 21:08:41'!
ERROR!
!StoreInterface class methodsFor: 'error description' stamp: 'pdb 11/3/2022 21:08:56'!
incorrectAuthenticationErrorMessage
	self shouldBeImplemented.! !
!StoreInterface class methodsFor: 'error description' stamp: 'pdb 11/3/2022 21:09:21' prior: 50556558!
incorrectAuthenticationErrorMessage
	^'Invalid id or password'.! !

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'pdb 11/3/2022 21:09:26'!
ERROR!
!StoreInterfaceTest methodsFor: 'support' stamp: 'pdb 11/3/2022 21:09:34'!
invalidClientId
	self shouldBeImplemented.! !
!StoreInterfaceTest methodsFor: 'support' stamp: 'pdb 11/3/2022 21:09:46' prior: 50556572!
invalidClientId
	^'cuca'! !

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'pdb 11/3/2022 21:09:48'!
ERROR!
!StoreInterfaceTest methodsFor: 'support' stamp: 'pdb 11/3/2022 21:09:52'!
invalidClientPassword
	self shouldBeImplemented.! !
!StoreInterfaceTest methodsFor: 'support' stamp: 'pdb 11/3/2022 21:10:04' prior: 50556584!
invalidClientPassword
	^'monga'.! !

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'pdb 11/3/2022 21:10:16'!
PASSED!

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'pdb 11/3/2022 21:10:16'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'pdb 11/3/2022 21:10:16'!
PASSED!
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'pdb 11/3/2022 21:11:15'!
test03AddToCartAddsItemSuccesfully

	self should: [interface createCartWithId: self invalidClientId andPassword: self invalidClientPassword.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface incorrectAuthenticationErrorMessage.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'pdb 11/3/2022 21:12:04' prior: 50556604!
test03AddToCartAddsItemSuccesfully

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'pdb 11/3/2022 21:13:59' prior: 50556616!
test03AddToCartAddsItemSuccesfully

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId withBook: self.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'pdb 11/3/2022 21:14:28' prior: 50556624!
test03AddToCartAddsItemSuccesfully

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId withBook: testObjectsFactory itemSellByTheStore withQty: 4.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'pdb 11/3/2022 21:14:46' prior: 50556634!
test03AddToCartAddsItemSuccesfully

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'pdb 11/3/2022 21:15:59' prior: 50556645!
test03AddToCartAddsItemSuccesfully

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self assert: (interface listCart: cartId) equals: (Dictionary new add: testObjectsFactory itemSellByTheStore -> 4).! !

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'pdb 11/3/2022 21:16:01'!
ERROR!
!StoreInterface methodsFor: 'interface' stamp: 'pdb 11/3/2022 21:16:09'!
addToCart: aSmallInteger book: aString withQuantity: aSmallInteger3 
	self shouldBeImplemented.! !
!StoreInterface methodsFor: 'interface' stamp: 'pdb 11/3/2022 21:16:13' prior: 50556673!
addToCart: aSmallInteger book: aString withQuantity: aSmallInteger3 
! !
!StoreInterface methodsFor: 'interface' stamp: 'pdb 11/3/2022 21:16:52' prior: 50556679!
addToCart: aCartId book: aString withQuantity: aSmallInteger3 
	
	(cartSessions at: aCartId) add: self.! !
!StoreInterface methodsFor: 'interface' stamp: 'pdb 11/3/2022 21:17:23' prior: 50556685!
addToCart: aCartId book: aBook withQuantity: aQuantity 
	
	(cartSessions at: aCartId) add: aQuantity of: aBook.! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'pdb 11/3/2022 21:17:25'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'pdb 11/3/2022 21:17:25'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'pdb 11/3/2022 21:17:25'!
FAILURE!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'pdb 11/3/2022 21:17:25'!
FAILURE!

----QUIT----(3 November 2022 21:18:26) CuisUniversity-5481.image priorSource: 7059698!

----STARTUP---- (4 November 2022 17:13:00) as /Users/msaied/Documents/UBA/inge1/Imagenes/TusLibros/CuisUniversity-5481.image!


----End fileIn of /Users/msaied/Documents/UBA/inge1/Imagenes/TusLibros/TusLibros.st----!

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/4/2022 17:14:42'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/4/2022 17:14:42'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/4/2022 17:14:42'!
FAILURE!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/4/2022 17:14:42'!
FAILURE!
!StoreInterface methodsFor: 'initialization' stamp: 'ms 11/4/2022 17:17:25' prior: 50552879!
listCart: aCartId 
	^Dictionary new.! !
!StoreInterface methodsFor: 'initialization' stamp: 'ms 11/4/2022 17:18:13' prior: 50553008!
listCart: aCartId 
	
	cartSessions at: aCartId ! !
!StoreInterface methodsFor: 'initialization' stamp: 'ms 11/4/2022 17:18:17' prior: 50553013!
listCart: aCartId 
	
	| cart |
	cart := cartSessions at: aCartId ! !
!StoreInterface methodsFor: 'initialization' stamp: 'ms 11/4/2022 17:18:21' prior: 50553018!
listCart: aCartId 
	
	| cart |
	
	cart := cartSessions at: aCartId ! !
!StoreInterface methodsFor: 'initialization' stamp: 'ms 11/4/2022 17:18:25' prior: 50553024!
listCart: aCartId 
	
	| cart |
	
	cart := cartSessions at: aCartId.! !
!StoreInterface methodsFor: 'initialization' stamp: 'ms 11/4/2022 17:19:47' prior: 50553030!
listCart: aCartId 
	
	| cart |
	
	cart := cartSessions at: aCartId.
	
	^cart listCart.! !
!StoreInterface methodsFor: 'initialization' stamp: 'ms 11/4/2022 17:22:30' prior: 50553036!
listCart: aCartId 
	
	| cart |
	
	cart := cartSessions at: aCartId.
	
	^cart items 
		inject: Dictionary new 
		into: [ :aDict :item | 
			aDict at: item put: (aDict at: item ifAbsent: 0) + 1
		].! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/4/2022 17:22:42'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/4/2022 17:22:42'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/4/2022 17:22:42'!
ERROR!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/4/2022 17:22:42'!
ERROR!
!StoreInterface methodsFor: 'initialization' stamp: 'ms 11/4/2022 17:22:58' prior: 50553042!
listCart: aCartId 
	
	| cart |
	
	cart := cartSessions at: aCartId.
	
	^cart items 
		inject: Dictionary new 
		into: [ :aDict :item | 
			aDict at: item put: (aDict at: item ifAbsent: [^0]) + 1
		].! !
!StoreInterface methodsFor: 'initialization' stamp: 'ms 11/4/2022 17:23:03' prior: 50553065!
listCart: aCartId 
	
	| cart |
	
	cart := cartSessions at: aCartId.
	
	^cart items 
		inject: Dictionary new 
		into: [ :aDict :item | 
			aDict at: item put: (aDict at: item ifAbsent: [0]) + 1
		].! !
!StoreInterface methodsFor: 'initialization' stamp: 'ms 11/4/2022 17:23:15' prior: 50553075!
listCart: aCartId 
	
	| cart |
	
	cart := cartSessions at: aCartId.
	
	^cart items 
		inject: (Dictionary new)
		into: [ :aDict :item | 
			aDict at: item put: (aDict at: item ifAbsent: [0]) + 1
		].! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/4/2022 17:23:17'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/4/2022 17:23:17'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/4/2022 17:23:17'!
ERROR!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/4/2022 17:23:17'!
ERROR!

----End fileIn of /Users/msaied/Documents/UBA/inge1/Imagenes/TusLibros/Packages/TerseGuide.pck.st----!
!StoreInterface methodsFor: 'initialization' stamp: 'ms 11/4/2022 17:24:53' prior: 50553085!
listCart: aCartId 
	
	| cart |
	
	cart := cartSessions at: aCartId.
	
	^cart items 
		inject: (Dictionary new)
		into: [ :aDict :item | 
			aDict at: item put: (aDict at: item ifAbsent: [0]) + 1.
		].! !
!StoreInterface methodsFor: 'initialization' stamp: 'ms 11/4/2022 17:24:59' prior: 50556029!
listCart: aCartId 
	
	| cart |
	
	cart := cartSessions at: aCartId.
	
	^cart items 
		inject: (Dictionary new)
		into: [ :aDict :item | 
			aDict at: item put: (aDict at: item ifAbsent: [0]) + 1. aDict
		].! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/4/2022 17:25:01'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/4/2022 17:25:01'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/4/2022 17:25:01'!
FAILURE!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/4/2022 17:25:01'!
FAILURE!

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/4/2022 17:25:21'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/4/2022 17:25:21'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/4/2022 17:25:21'!
FAILURE!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/4/2022 17:25:21'!
FAILURE!
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 17:25:46' prior: 50552556!
test03AddToCartAddsItemSuccesfully

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self assert: (interface listCart: cartId) equals: (Dictionary new add: testObjectsFactory itemSellByTheStore -> 4; yourself).! !

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/4/2022 17:25:47'!
PASSED!

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/4/2022 17:25:47'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/4/2022 17:25:47'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/4/2022 17:25:47'!
PASSED!
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 17:31:30'!
test04TryingToListInvalidCartIdThrowsError

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self assert: (interface listCart: cartId) equals: (Dictionary new add: testObjectsFactory itemSellByTheStore -> 4; yourself).! !
!StoreInterfaceTest methodsFor: 'support' stamp: 'ms 11/4/2022 17:32:23'!
invalidCartId
	^-1! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 17:34:18' prior: 50556106!
test04TryingToListInvalidCartIdThrowsError

	self should: [interface listCart: self invalidCartId.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface invalidCartIdErrorMessage.! !

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/4/2022 17:34:23'!
ERROR!
!StoreInterface class methodsFor: 'error description' stamp: 'ms 11/4/2022 17:34:32'!
invalidCartIdErrorMessage
	self shouldBeImplemented.! !
!StoreInterface class methodsFor: 'error description' stamp: 'ms 11/4/2022 17:34:48' prior: 50556138!
invalidCartIdErrorMessage
	^'Invalid Cart Id'! !

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/4/2022 17:34:49'!
FAILURE!
!StoreInterface methodsFor: 'initialization' stamp: 'ms 11/4/2022 17:35:27' prior: 50556039!
listCart: aCartId 
	
	| cart |
	
	cart := cartSessions at: aCartId ifAbsent: [self error: self class invalidCartIdErrorMessage ].
	
	^cart items 
		inject: (Dictionary new)
		into: [ :aDict :item | 
			aDict at: item put: (aDict at: item ifAbsent: [0]) + 1. aDict
		].! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/4/2022 17:35:28'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/4/2022 17:35:28'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/4/2022 17:35:28'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/4/2022 17:35:28'!
PASSED!

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/4/2022 17:35:39'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/4/2022 17:35:39'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/4/2022 17:35:39'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/4/2022 17:35:39'!
PASSED!
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 17:37:08'!
test05CheckoutCartReturnsTransactionId
	
	! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 17:37:43' prior: 50556192!
test05CheckoutCartReturnsTransactionId

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self assert: (interface listCart: cartId) equals: (Dictionary new add: testObjectsFactory itemSellByTheStore -> 4; yourself).! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 17:40:27' prior: 50556197!
test05CheckoutCartReturnsTransactionId

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self assert: (interface checkOutCart: cartId 
		withCcn: self validCcn 
		withCced: self validCced 
		withCco: self validCco) 
	equals: (Dictionary new add: testObjectsFactory itemSellByTheStore -> 4; yourself).! !

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 17:41:54'!
ERROR!
!StoreInterfaceTest methodsFor: 'support' stamp: 'ms 11/4/2022 17:42:05'!
validCcn
	self shouldBeImplemented.! !
!StoreInterfaceTest methodsFor: 'support' stamp: 'ms 11/4/2022 17:42:45' prior: 50556233!
validCcn
	^'4567891098765432'.! !

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 17:42:48'!
ERROR!
!StoreInterfaceTest methodsFor: 'support' stamp: 'ms 11/4/2022 17:42:57'!
validCced
	self shouldBeImplemented.! !
!StoreInterfaceTest methodsFor: 'support' stamp: 'ms 11/4/2022 17:43:08' prior: 50556245!
validCced
	^'1224'! !

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 17:43:11'!
ERROR!
!StoreInterfaceTest methodsFor: 'support' stamp: 'ms 11/4/2022 17:43:16'!
validCco
	self shouldBeImplemented.! !
!StoreInterfaceTest methodsFor: 'support' stamp: 'ms 11/4/2022 17:43:28' prior: 50556257!
validCco
	^'Martin Saied'! !

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 17:43:44'!
ERROR!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 17:43:44'!
ERROR!
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/4/2022 17:43:49'!
checkOutCart: aSmallInteger withCcn: aString withCced: aString3 withCco: aString4 
	self shouldBeImplemented.! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/4/2022 17:44:04' prior: 50556273!
checkOutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	self shouldBeImplemented.! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/4/2022 17:47:24' prior: 50556280!
checkOutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| cart |
	
	cart := cartSessions at: aCartId.! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/4/2022 17:47:51' prior: 50556286!
checkOutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| cart creditCard |
	
	cart := cartSessions at: aCartId.
	creditCard := CreditCard expiringOn: aCced.! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/4/2022 17:48:28' prior: 50556293!
checkOutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| cart creditCard |
	
	cart := cartSessions at: aCartId.
	creditCard := CreditCard expiringOn: aCced.
	"cashier := Cashier toCheckout:  charging: cart total throught: creditCart on:  registeringOn: "! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/4/2022 17:49:43' prior: 50556302!
checkOutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| cart creditCard cashier |
	
	cart := cartSessions at: aCartId.
	creditCard := CreditCard expiringOn: aCced.
	cashier := Cashier toCheckout: cart charging: cart total throught: creditCard on: merchantProcessor registeringOn: OrderedCollection new.! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/4/2022 17:50:22' prior: 50556314!
checkOutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| cart creditCard cashier |
	
	cart := cartSessions at: aCartId.
	creditCard := CreditCard expiringOn: aCced.
	cashier := Cashier toCheckout: cart charging: creditCard throught: merchantProcessor on: merchantProcessor registeringOn: OrderedCollection new.! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/4/2022 17:50:47' prior: 50556327!
checkOutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| cart creditCard cashier |
	
	cart := cartSessions at: aCartId.
	creditCard := CreditCard expiringOn: aCced.
	cashier := Cashier initializeToCheckout: cart charging: creditCard throught: merchantProcessor registeringOn: OrderedCollection new.! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/4/2022 17:52:11' prior: 50556341!
checkOutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| cart creditCard cashier |
	
	cart := cartSessions at: aCartId.
	creditCard := CreditCard expiringOn: aCced.
	cashier := Cashier toCheckout: cart charging: creditCard throught: merchantProcessor on: Date today registeringOn: OrderedCollection new.! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/4/2022 17:52:57' prior: 50556354!
checkOutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| cart creditCard cashier |
	
	cart := cartSessions at: aCartId.
	creditCard := CreditCard expiringOn: aCced.
	cashier := Cashier toCheckout: cart charging: creditCard throught: merchantProcessor on: DateAndTime now registeringOn: OrderedCollection new.! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/4/2022 17:53:11' prior: 50556367!
checkOutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| cart creditCard cashier |
	
	cart := cartSessions at: aCartId.
	creditCard := CreditCard expiringOn: aCced.
	cashier := Cashier toCheckout: cart charging: creditCard throught: merchantProcessor on: DateAndTime now registeringOn: OrderedCollection new.
	
	cashier ! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/4/2022 17:53:39' prior: 50556380!
checkOutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| cart creditCard cashier |
	
	cart := cartSessions at: aCartId.
	creditCard := CreditCard expiringOn: aCced.
	cashier := Cashier toCheckout: cart charging: creditCard throught: merchantProcessor on: DateAndTime now registeringOn: OrderedCollection new.
	
	cashier checkOut.! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/4/2022 17:53:47' prior: 50556394!
checkOutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| cart creditCard cashier |
	
	cart := cartSessions at: aCartId.
	creditCard := CreditCard expiringOn: aCced.
	cashier := Cashier toCheckout: cart charging: creditCard throught: merchantProcessor on: DateAndTime now registeringOn: OrderedCollection new.
	
	^cashier checkOut.! !

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 17:54:11'!
ERROR!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 17:54:11'!
ERROR!
!StoreInterfaceTest methodsFor: 'support' stamp: 'ms 11/4/2022 17:54:45' prior: 50556250!
validCced
	^DateAndTime yesterday! !

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ms 11/4/2022 17:55:33'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ms 11/4/2022 17:55:33'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ms 11/4/2022 17:55:33'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ms 11/4/2022 17:55:33'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ms 11/4/2022 17:55:33'!
PASSED!

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/4/2022 17:55:36'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/4/2022 17:55:36'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/4/2022 17:55:36'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/4/2022 17:55:36'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 17:55:36'!
ERROR!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 17:55:36'!
ERROR!
!StoreInterfaceTest methodsFor: 'support' stamp: 'ms 11/4/2022 17:56:48' prior: 50556429!
validCced
	^(Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1)! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/4/2022 17:56:56'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/4/2022 17:56:56'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/4/2022 17:56:56'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/4/2022 17:56:56'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 17:56:56'!
ERROR!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 17:56:56'!
ERROR!

!classDefinition: #StoreInterfaceTest category: 'TusLibros' stamp: 'ms 11/4/2022 17:59:06'!
TestCase subclass: #StoreInterfaceTest
	instanceVariableNames: 'interface testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterfaceTest methodsFor: 'setUp/tearDown' stamp: 'ms 11/4/2022 17:59:05'!
debit: anAmount from: aCreditCard 

	^debitBehavior value: anAmount value: aCreditCard ! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/4/2022 17:59:10'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/4/2022 17:59:10'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/4/2022 17:59:10'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/4/2022 17:59:10'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 17:59:10'!
ERROR!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 17:59:10'!
ERROR!

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/4/2022 18:00:10'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/4/2022 18:00:10'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/4/2022 18:00:10'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/4/2022 18:00:10'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 18:00:10'!
ERROR!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 18:00:10'!
ERROR!
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 18:01:05' prior: 50556212!
test05CheckoutCartReturnsTransactionId

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
		debitBehavior := [ :anAmount :aCreditCard | | debitedAmout debitedCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	
	self assert: (interface checkOutCart: cartId 
		withCcn: self validCcn 
		withCced: self validCced 
		withCco: self validCco) 
	equals: (Dictionary new add: testObjectsFactory itemSellByTheStore -> 4; yourself).! !

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 18:01:11'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/4/2022 18:01:46' prior: 50556408!
checkOutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| cart creditCard cashier |
	
	cart := cartSessions at: aCartId.
	creditCard := CreditCard expiringOn: aCced.
	cashier := Cashier toCheckout: cart charging: creditCard throught: merchantProcessor on: DateAndTime now registeringOn: OrderedCollection new.
	
	cashier checkOut.! !

Object subclass: #StoreInterface
	instanceVariableNames: 'merchantProcessor clientAuthenticator carts catalog cartSessions idCounter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #StoreInterface
	instanceVariableNames: 'merchantProcessor clientAuthenticator carts catalog cartSessions idCounter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #StoreInterface
	instanceVariableNames: 'merchantProcessor clientAuthenticator carts store catalog cartSessions idCounter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'ms 11/4/2022 18:04:15'!
Object subclass: #StoreInterface
	instanceVariableNames: 'merchantProcessor clientAuthenticator carts store catalog cartSessions idCounter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #StoreInterface
	instanceVariableNames: 'merchantProcessor clientAuthenticator carts store salesBook catalog cartSessions idCounter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #StoreInterface
	instanceVariableNames: 'merchantProcessor clientAuthenticator carts store salesBook catalog cartSessions idCounter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #StoreInterface
	instanceVariableNames: 'merchantProcessor clientAuthenticator carts salesBook catalog cartSessions idCounter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'ms 11/4/2022 18:10:05'!
Object subclass: #StoreInterface
	instanceVariableNames: 'merchantProcessor clientAuthenticator carts salesBook catalog cartSessions idCounter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'initialization' stamp: 'ms 11/4/2022 18:10:29' prior: 50552868!
initializeWithMP: aMerchantProcessor clientAuthenticator: aClientAuthenticator andCatalog: aCatalog 
	merchantProcessor := aMerchantProcessor.
	clientAuthenticator := aClientAuthenticator.
	catalog := aCatalog.
	idCounter := 0.
	cartSessions := Dictionary new.
	salesBook  := OrderedCollection  new.! !
!StoreInterface methodsFor: 'initialization' stamp: 'ms 11/4/2022 18:10:33' prior: 50556655!
initializeWithMP: aMerchantProcessor clientAuthenticator: aClientAuthenticator andCatalog: aCatalog 
	merchantProcessor := aMerchantProcessor.
	clientAuthenticator := aClientAuthenticator.
	catalog := aCatalog.
	idCounter := 0.
	cartSessions := Dictionary new.
	salesBook := OrderedCollection new.! !

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 18:11:49'!
FAILURE!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 18:11:50'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/4/2022 18:12:21' prior: 50556582!
checkOutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| cart creditCard cashier |
	
	cart := cartSessions at: aCartId.
	creditCard := CreditCard expiringOn: aCced.
	cashier := Cashier toCheckout: cart charging: creditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook .
	
	cashier checkOut.
	
	^salesBook size! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 18:12:32' prior: 50556556!
test05CheckoutCartReturnsTransactionId

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
		debitBehavior := [ :anAmount :aCreditCard | | debitedAmout debitedCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	
	self assert: (interface checkOutCart: cartId 
		withCcn: self validCcn 
		withCced: self validCced 
		withCco: self validCco) 
	equals: 1.! !

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 18:12:42'!
PASSED!

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/4/2022 18:12:42'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/4/2022 18:12:42'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/4/2022 18:12:42'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/4/2022 18:12:42'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 18:12:42'!
PASSED!
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 18:12:47' prior: 50556703!
test05CheckoutCartReturnsTransactionId

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
		debitBehavior := [ :anAmount :aCreditCard | 
			| debitedAmout debitedCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	
	self assert: (interface checkOutCart: cartId 
		withCcn: self validCcn 
		withCced: self validCced 
		withCco: self validCco) 
	equals: 1.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 18:12:51' prior: 50556744!
test05CheckoutCartReturnsTransactionId

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
		debitBehavior := [ :anAmount :aCreditCard | 
			].
	
	self assert: (interface checkOutCart: cartId 
		withCcn: self validCcn 
		withCced: self validCced 
		withCco: self validCco) 
	equals: 1.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 18:12:54' prior: 50556765!
test05CheckoutCartReturnsTransactionId

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
		debitBehavior := [ :anAmount :aCreditCard | ].
	
	self assert: (interface checkOutCart: cartId 
		withCcn: self validCcn 
		withCced: self validCced 
		withCco: self validCco) 
	equals: 1.! !

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 18:12:54'!
PASSED!

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/4/2022 18:12:54'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/4/2022 18:12:54'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/4/2022 18:12:54'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/4/2022 18:12:54'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 18:12:54'!
PASSED!
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 18:13:59'!
test06CheckoutWithInvalidCcnThrowsError

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
		debitBehavior := [ :anAmount :aCreditCard | ].
	
	self assert: (interface checkOutCart: cartId 
		withCcn: self validCcn 
		withCced: self validCced 
		withCco: self validCco) 
	equals: 1.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 18:14:13'!
test07CheckoutWithInvalidCcedThrowsError

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
		debitBehavior := [ :anAmount :aCreditCard | ].
	
	self assert: (interface checkOutCart: cartId 
		withCcn: self validCcn 
		withCced: self validCced 
		withCco: self validCco) 
	equals: 1.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 18:14:19'!
test07CheckoutWithInvalidCcoThrowsError

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
		debitBehavior := [ :anAmount :aCreditCard | ].
	
	self assert: (interface checkOutCart: cartId 
		withCcn: self validCcn 
		withCced: self validCced 
		withCco: self validCco) 
	equals: 1.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 18:14:26'!
test07CheckoutWithInvalidCartIdThrowsError

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
		debitBehavior := [ :anAmount :aCreditCard | ].
	
	self assert: (interface checkOutCart: cartId 
		withCcn: self validCcn 
		withCced: self validCced 
		withCco: self validCco) 
	equals: 1.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 18:14:46'!
test08CheckoutWithInvalidCcedThrowsError

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
		debitBehavior := [ :anAmount :aCreditCard | ].
	
	self assert: (interface checkOutCart: cartId 
		withCcn: self validCcn 
		withCced: self validCced 
		withCco: self validCco) 
	equals: 1.! !

!methodRemoval: StoreInterfaceTest #test07CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/4/2022 18:14:50'!
test07CheckoutWithInvalidCcedThrowsError

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
		debitBehavior := [ :anAmount :aCreditCard | ].
	
	self assert: (interface checkOutCart: cartId 
		withCcn: self validCcn 
		withCced: self validCced 
		withCco: self validCco) 
	equals: 1.!
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 18:15:00'!
test09CheckoutWithInvalidCcoThrowsError

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
		debitBehavior := [ :anAmount :aCreditCard | ].
	
	self assert: (interface checkOutCart: cartId 
		withCcn: self validCcn 
		withCced: self validCced 
		withCco: self validCco) 
	equals: 1.! !

!methodRemoval: StoreInterfaceTest #test07CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/4/2022 18:15:03'!
test07CheckoutWithInvalidCcoThrowsError

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
		debitBehavior := [ :anAmount :aCreditCard | ].
	
	self assert: (interface checkOutCart: cartId 
		withCcn: self validCcn 
		withCced: self validCced 
		withCco: self validCco) 
	equals: 1.!
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 18:15:31' prior: 50556820!
test06CheckoutWithInvalidCcnThrowsError

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
		
	
	self assert: (interface checkOutCart: cartId 
		withCcn: self validCcn 
		withCced: self validCced 
		withCco: self validCco) 
	equals: 1.! !
!StoreInterfaceTest methodsFor: 'setUp/tearDown' stamp: 'ms 11/4/2022 18:15:38' prior: 50552571 overrides: 16961394!
setUp
	
	testObjectsFactory := StoreTestObjectsFactory new.
	interface := StoreInterface withMP: self clientAuthenticator: self andCatalog: testObjectsFactory defaultCatalog.
	debitBehavior := [ :anAmount :aCreditCard | ].! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/4/2022 18:15:45'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/4/2022 18:15:45'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/4/2022 18:15:45'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/4/2022 18:15:45'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 18:15:45'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/4/2022 18:15:45'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/4/2022 18:15:45'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/4/2022 18:15:46'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/4/2022 18:15:46'!
PASSED!
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 18:16:00' prior: 50556782!
test05CheckoutCartReturnsTransactionId

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	

	
	self assert: (interface checkOutCart: cartId 
		withCcn: self validCcn 
		withCced: self validCced 
		withCco: self validCco) 
	equals: 1.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 18:17:48' prior: 50556956!
test06CheckoutWithInvalidCcnThrowsError

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self should: [interface checkOutCart: cartId 
		withCcn: self validCcn 
		withCced: self validCced 
		withCco: self validCco.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface invalidCcnErrorMessage.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 18:18:51' prior: 50557030!
test06CheckoutWithInvalidCcnThrowsError

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self should: [interface checkOutCart: cartId 
		withCcn: self invalidCcn 
		withCced: self validCced 
		withCco: self validCco.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface invalidCcnErrorMessage.! !

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/4/2022 18:19:02'!
ERROR!
!StoreInterface class methodsFor: 'error description' stamp: 'ms 11/4/2022 18:19:17'!
invalidCcnErrorMessage
	self shouldBeImplemented.! !
!StoreInterface class methodsFor: 'error description' stamp: 'ms 11/4/2022 18:19:48' prior: 50557069!
invalidCcnErrorMessage
	^'Invalid credit card number'! !

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/4/2022 18:19:50'!
ERROR!
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 18:20:28' prior: 50557048!
test06CheckoutWithInvalidCcnThrowsError

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self should: [interface checkOutCart: cartId 
		withCcn: testObjectsFactory invalidCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface invalidCcnErrorMessage.! !

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/4/2022 18:20:42'!
FAILURE!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/4/2022 18:21:08'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'ms 11/4/2022 18:21:15'!
invalidCcn
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'ms 11/4/2022 18:21:27' prior: 50557109!
invalidCcn
	^'abc'! !

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/4/2022 18:21:28'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'ms 11/4/2022 18:21:49'!
validCced
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'ms 11/4/2022 18:21:59' prior: 50557121!
validCced
	^(Month month: self today monthIndex year: self today yearNumber + 1)! !

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/4/2022 18:22:00'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'ms 11/4/2022 18:22:05'!
validCco
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'ms 11/4/2022 18:22:14' prior: 50557135!
validCco
	^'Martin Saied'! !

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/4/2022 18:22:16'!
FAILURE!

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/4/2022 18:22:24'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/4/2022 18:22:24'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/4/2022 18:22:24'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/4/2022 18:22:24'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 18:22:24'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/4/2022 18:22:24'!
FAILURE!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/4/2022 18:22:24'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/4/2022 18:22:24'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/4/2022 18:22:24'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/4/2022 18:22:24'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'ms 11/4/2022 18:24:25'!
expiringOn: aMonth withCcn: aCcn  
	
	^self new initializeExpiringOn: aMonth! !

!methodRemoval: CreditCard class #expiringOn: stamp: 'ms 11/4/2022 18:24:25'!
expiringOn: aMonth 
	
	^self new initializeExpiringOn: aMonth!
!CreditCard class methodsFor: 'instance creation' stamp: 'ms 11/4/2022 18:25:17'!
expiringOn: aMonth withCcn: aCcn andCco: aCco   
	
	^self new initializeExpiringOn: aMonth! !

!methodRemoval: CreditCard class #expiringOn:withCcn: stamp: 'ms 11/4/2022 18:25:17'!
expiringOn: aMonth withCcn: aCcn  
	
	^self new initializeExpiringOn: aMonth!
!CreditCard methodsFor: 'initialization' stamp: 'ms 11/4/2022 18:26:00'!
initializeExpiringOn: aMonth withCcn: aCcn  
	
	expiration := aMonth ! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 18:26:00' prior: 50557193!
expiringOn: aMonth withCcn: aCcn andCco: aCco   
	
	^self new initializeExpiringOn: aMonth withCcn: aCcn! !

!methodRemoval: CreditCard #initializeExpiringOn: stamp: 'ms 11/4/2022 18:26:00'!
initializeExpiringOn: aMonth 
	
	expiration := aMonth !
!CreditCard methodsFor: 'initialization' stamp: 'ms 11/4/2022 18:26:09' prior: 50557204!
initializeExpiringOn: aMonth withCcn: aCcn  
	
	expiration := aMonth ! !
!CreditCard methodsFor: 'initialization' stamp: 'ms 11/4/2022 18:26:27' prior: 50557221!
initializeExpiringOn: aMonth withCcn: aCcn  
	
	expiration := aMonth! !
!CreditCard methodsFor: 'initialization' stamp: 'ms 11/4/2022 18:26:50'!
initializeExpiringOn: aMonth withCcn: aCcn andCco: aCco   
	
	expiration := aMonth! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 18:26:50' prior: 50557210!
expiringOn: aMonth withCcn: aCcn andCco: aCco   
	
	^self new initializeExpiringOn: aMonth withCcn: aCcn andCco: aCco! !

!methodRemoval: CreditCard #initializeExpiringOn:withCcn: stamp: 'ms 11/4/2022 18:26:50'!
initializeExpiringOn: aMonth withCcn: aCcn  
	
	expiration := aMonth!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'ms 11/4/2022 18:27:19'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration ccn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'ms 11/4/2022 18:27:20'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration ccn cco'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'ms 11/4/2022 18:27:17' prior: 50557232!
initializeExpiringOn: aMonth withCcn: aCcn andCco: aCco   
	
	expiration := aMonth.
	ccn := aCcn.
	cco := aCco! !
!CreditCard class methodsFor: 'instance creation' stamp: 'ms 11/4/2022 18:28:05' prior: 50557238!
expiringOn: aMonth withCcn: aCcn andCco: aCco   

	self assertValidCcn: aCcn.
	self assertValidCco: aCco.
	
	^self new initializeExpiringOn: aMonth withCcn: aCcn andCco: aCco! !
!CreditCard class methodsFor: 'instance creation' stamp: 'ms 11/4/2022 18:28:41' prior: 50557271!
expiringOn: aMonth withCcn: aCcn andCco: aCco   

	self assertValidCcn: aCcn.
	
	^self new initializeExpiringOn: aMonth withCcn: aCcn andCco: aCco! !
!CreditCard class methodsFor: 'assertions' stamp: 'ms 11/4/2022 18:30:36'!
assertValidCcn: aCcn
	(aCcn size = 30) not or: [aCcn allSatisfy: [:aChar | aChar isDigit]]! !
!CreditCard class methodsFor: 'assertions' stamp: 'ms 11/4/2022 18:31:34' prior: 50557288!
assertValidCcn: aCcn
	((aCcn size = 30) not or: [aCcn allSatisfy: [:aChar | aChar isDigit] not]) ifTrue: [self error: self invalidCcnErrorMessage]! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/4/2022 18:31:39'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/4/2022 18:31:39'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/4/2022 18:31:39'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/4/2022 18:31:39'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 18:31:39'!
ERROR!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/4/2022 18:31:39'!
ERROR!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/4/2022 18:31:39'!
ERROR!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/4/2022 18:31:39'!
ERROR!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/4/2022 18:31:39'!
ERROR!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 18:31:44'!
ERROR!
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/4/2022 18:32:22' prior: 50556688!
checkOutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| cart creditCard cashier |
	
	cart := cartSessions at: aCartId.
	creditCard := CreditCard expiringOn: aCced withCcn: aCcn andCco: aCco.
	cashier := Cashier toCheckout: cart charging: creditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook .
	
	cashier checkOut.
	
	^salesBook size! !

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 18:32:31'!
ERROR!
!CreditCard class methodsFor: 'assertions' stamp: 'ms 11/4/2022 18:32:56' prior: 50557294!
assertValidCcn: aCcn
	((aCcn size = 16) not or: [aCcn allSatisfy: [:aChar | aChar isDigit] not]) ifTrue: [self error: self invalidCcnErrorMessage]! !

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 18:32:58'!
ERROR!
!CreditCard class methodsFor: 'assertions' stamp: 'ms 11/4/2022 18:33:22' prior: 50557356!
assertValidCcn: aCcn
	((aCcn size = 16) not or: [(aCcn allSatisfy: [:aChar | aChar isDigit]) not]) ifTrue: [self error: self invalidCcnErrorMessage]! !

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 18:33:24'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/4/2022 18:33:26'!
ERROR!
!CreditCard class methodsFor: 'assertions' stamp: 'ms 11/4/2022 18:34:10' prior: 50557367!
assertValidCcn: aCcn
	((aCcn size = 16) and: [(aCcn allSatisfy: [:aChar | aChar isDigit])]) ifFalse: [self error: self invalidCcnErrorMessage]! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/4/2022 18:34:18'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/4/2022 18:34:18'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/4/2022 18:34:18'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/4/2022 18:34:18'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 18:34:18'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/4/2022 18:34:18'!
ERROR!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/4/2022 18:34:18'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/4/2022 18:34:18'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/4/2022 18:34:18'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/4/2022 18:34:18'!
ERROR!
!CreditCard class methodsFor: 'error messages' stamp: 'ms 11/4/2022 18:34:32'!
invalidCcnErrorMessage
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'error messages' stamp: 'ms 11/4/2022 18:34:51' prior: 50557425!
invalidCcnErrorMessage
	^'Invalid credit card number'! !

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/4/2022 18:34:53'!
PASSED!

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/4/2022 18:34:59'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/4/2022 18:34:59'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/4/2022 18:34:59'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/4/2022 18:34:59'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 18:34:59'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/4/2022 18:34:59'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/4/2022 18:34:59'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/4/2022 18:34:59'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/4/2022 18:34:59'!
PASSED!
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 18:53:31' prior: 50556871!
test07CheckoutWithInvalidCartIdThrowsError

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
		debitBehavior := [ :anAmount :aCreditCard | ].
	
	self should: [interface checkOutCart: cartId 
		withCcn: testObjectsFactory invalidCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface invalidCcnErrorMessage.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 18:53:45' prior: 50557471!
test07CheckoutWithInvalidCartIdThrowsError

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
		debitBehavior := [ :anAmount :aCreditCard | ].
	
	self should: [interface checkOutCart: cartId 
		withCcn: testObjectsFactory invalidCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface invalidCartIdErrorMessage.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 18:54:00' prior: 50557492!
test07CheckoutWithInvalidCartIdThrowsError

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
		debitBehavior := [ :anAmount :aCreditCard | ].
	
	self should: [interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface invalidCartIdErrorMessage.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 18:54:13' prior: 50557513!
test07CheckoutWithInvalidCartIdThrowsError

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
		debitBehavior := [ :anAmount :aCreditCard | ].
	
	self should: [interface checkOutCart: testObjectsFactory invalidCartId
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface invalidCartIdErrorMessage.! !

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/4/2022 18:54:14'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'ms 11/4/2022 18:54:45'!
invalidCartId
	^-1! !

!methodRemoval: StoreInterfaceTest #invalidCartId stamp: 'ms 11/4/2022 18:55:08'!
invalidCartId
	^-1!
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 18:55:18' prior: 50556125!
test04TryingToListInvalidCartIdThrowsError

	self should: [interface listCart: testObjectsFactory invalidCartId.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface invalidCartIdErrorMessage.! !

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/4/2022 18:55:19'!
PASSED!

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/4/2022 18:55:19'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/4/2022 18:55:19'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/4/2022 18:55:19'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/4/2022 18:55:19'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 18:55:19'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/4/2022 18:55:19'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/4/2022 18:55:19'!
ERROR!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/4/2022 18:55:19'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/4/2022 18:55:19'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/4/2022 18:55:19'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'ms 11/4/2022 18:55:39'!
validCcn
	^'4567891098765432'.! !

!methodRemoval: StoreInterfaceTest #validCcn stamp: 'ms 11/4/2022 18:55:44'!
validCcn
	^'4567891098765432'.!

!methodRemoval: StoreInterfaceTest #validCced stamp: 'ms 11/4/2022 18:55:47'!
validCced
	^(Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1)!

!methodRemoval: StoreInterfaceTest #validCco stamp: 'ms 11/4/2022 18:55:49'!
validCco
	^'Martin Saied'!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/4/2022 18:55:53'!
ERROR!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/4/2022 18:55:53'!
ERROR!
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 18:56:12' prior: 50556922!
test09CheckoutWithInvalidCcoThrowsError

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
		debitBehavior := [ :anAmount :aCreditCard | ].
	
	self assert: (interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory  validCced 
		withCco: testObjectsFactory  validCco) 
	equals: 1.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 18:56:16' prior: 50557640!
test09CheckoutWithInvalidCcoThrowsError

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
		debitBehavior := [ :anAmount :aCreditCard | ].
	
	self assert: (interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco) 
	equals: 1.! !

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/4/2022 18:56:16'!
PASSED!

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/4/2022 18:56:16'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/4/2022 18:56:16'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/4/2022 18:56:16'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/4/2022 18:56:16'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 18:56:16'!
ERROR!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/4/2022 18:56:16'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/4/2022 18:56:16'!
FAILURE!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/4/2022 18:56:16'!
ERROR!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/4/2022 18:56:16'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 18:56:24'!
ERROR!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 18:56:24'!
ERROR!
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 18:56:31' prior: 50557014!
test05CheckoutCartReturnsTransactionId

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	

	
	self assert: (interface checkOutCart: cartId 
		withCcn: testObjectsFactory  validCcn 
		withCced: testObjectsFactory  validCced 
		withCco: testObjectsFactory  validCco) 
	equals: 1.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 18:56:35' prior: 50557720!
test05CheckoutCartReturnsTransactionId

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	

	
	self assert: (interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco) 
	equals: 1.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 18:56:47' prior: 50556888!
test08CheckoutWithInvalidCcedThrowsError

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
		debitBehavior := [ :anAmount :aCreditCard | ].
	
	self assert: (interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco) 
	equals: 1.! !

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/4/2022 18:56:47'!
PASSED!

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/4/2022 18:56:48'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/4/2022 18:56:48'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/4/2022 18:56:48'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/4/2022 18:56:48'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 18:56:48'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/4/2022 18:56:48'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/4/2022 18:56:48'!
FAILURE!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/4/2022 18:56:48'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/4/2022 18:56:48'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/4/2022 18:56:48'!
FAILURE!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/4/2022 18:56:55'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/4/2022 18:56:58'!
FAILURE!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/4/2022 18:56:58'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/4/2022 18:57:32' prior: 50557337!
checkOutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| cart creditCard cashier |
	
	cart := cartSessions at: aCartId ifAbsent: [ self error: self class invalidCartIdErrorMessage ].
	creditCard := CreditCard expiringOn: aCced withCcn: aCcn andCco: aCco.
	cashier := Cashier toCheckout: cart charging: creditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook .
	
	cashier checkOut.
	
	^salesBook size! !

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/4/2022 18:57:37'!
PASSED!
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 18:57:55' prior: 50557754!
test08CheckoutWithInvalidCcedThrowsError

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
		debitBehavior := [ :anAmount :aCreditCard | ].
	
	self assert: (interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco) 
	equals: 1.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 18:58:01' prior: 50557843!
test08CheckoutWithInvalidCcedThrowsError

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
		debitBehavior := [ :anAmount :aCreditCard | ].
	
	self assert: (interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory invalidCced 
		withCco: testObjectsFactory validCco) 
	equals: 1.! !

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/4/2022 18:58:04'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'ms 11/4/2022 18:58:14'!
invalidCced
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'ms 11/4/2022 18:58:46' prior: 50552975!
notExpiredCreditCard
	
	^CreditCard expiringOn: (Month month: today monthIndex year: today yearNumber + 1)! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'ms 11/4/2022 18:58:58' prior: 50557884!
invalidCced
	(Month month: today monthIndex year: today yearNumber + 1)! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'ms 11/4/2022 18:59:02' prior: 50557896!
invalidCced
	(Month month: today monthIndex year: today yearNumber - 1)! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/4/2022 18:59:06'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/4/2022 18:59:06'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/4/2022 18:59:06'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/4/2022 18:59:06'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 18:59:06'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/4/2022 18:59:06'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/4/2022 18:59:06'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/4/2022 18:59:06'!
ERROR!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/4/2022 18:59:06'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ms 11/4/2022 18:59:06'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ms 11/4/2022 18:59:06'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ms 11/4/2022 18:59:06'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ms 11/4/2022 18:59:06'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ms 11/4/2022 18:59:06'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ms 11/4/2022 18:59:06'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ms 11/4/2022 18:59:06'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ms 11/4/2022 18:59:06'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ms 11/4/2022 18:59:06'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ms 11/4/2022 18:59:06'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'ms 11/4/2022 18:59:06'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ms 11/4/2022 18:59:06'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ms 11/4/2022 18:59:06'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ms 11/4/2022 18:59:06'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ms 11/4/2022 18:59:31'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ms 11/4/2022 18:59:32'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'ms 11/4/2022 18:59:32'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ms 11/4/2022 18:59:32'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ms 11/4/2022 18:59:32'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ms 11/4/2022 18:59:32'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ms 11/4/2022 18:59:36'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ms 11/4/2022 18:59:36'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'ms 11/4/2022 19:00:29' prior: 50552968!
expiredCreditCard
	
	^CreditCard expiringOn: self invalidCced withCcn: self validCcn  andCco: self validCco! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'ms 11/4/2022 19:00:30' prior: 50558010!
expiredCreditCard
	
	^CreditCard expiringOn: self invalidCced withCcn: self validCcn andCco: self validCco! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'ms 11/4/2022 19:00:42' prior: 50558017!
expiredCreditCard
	
	^CreditCard expiringOn: self validCced withCcn: self validCcn andCco: self validCco! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'ms 11/4/2022 19:00:49' prior: 50558024!
expiredCreditCard
	
	^CreditCard expiringOn: self invalidCced withCcn: self validCcn andCco: self validCco! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'ms 11/4/2022 19:01:00' prior: 50557889!
notExpiredCreditCard
	
	^CreditCard expiringOn: self invalidCced withCcn: self validCcn andCco: self validCco! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/4/2022 19:01:03'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/4/2022 19:01:03'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/4/2022 19:01:03'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/4/2022 19:01:03'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 19:01:03'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/4/2022 19:01:03'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/4/2022 19:01:03'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/4/2022 19:01:03'!
ERROR!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/4/2022 19:01:03'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/4/2022 19:01:03'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ms 11/4/2022 19:01:08'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ms 11/4/2022 19:01:08'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ms 11/4/2022 19:01:08'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ms 11/4/2022 19:01:08'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ms 11/4/2022 19:01:08'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ms 11/4/2022 19:01:08'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ms 11/4/2022 19:01:08'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ms 11/4/2022 19:01:08'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ms 11/4/2022 19:01:10'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ms 11/4/2022 19:01:10'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'ms 11/4/2022 19:01:10'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ms 11/4/2022 19:01:10'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ms 11/4/2022 19:01:10'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ms 11/4/2022 19:01:10'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ms 11/4/2022 19:01:15'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ms 11/4/2022 19:01:15'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'ms 11/4/2022 19:01:53' prior: 50557902!
invalidCced
	^(Month month: today monthIndex year: today yearNumber - 1)! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/4/2022 19:02:01'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/4/2022 19:02:01'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/4/2022 19:02:01'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/4/2022 19:02:01'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 19:02:01'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/4/2022 19:02:01'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/4/2022 19:02:01'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/4/2022 19:02:01'!
ERROR!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/4/2022 19:02:01'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/4/2022 19:02:01'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ms 11/4/2022 19:02:33'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ms 11/4/2022 19:02:33'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'ms 11/4/2022 19:02:33'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ms 11/4/2022 19:02:33'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ms 11/4/2022 19:02:33'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ms 11/4/2022 19:02:33'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ms 11/4/2022 19:02:38'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ms 11/4/2022 19:02:38'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'ms 11/4/2022 19:02:58' prior: 50558038!
notExpiredCreditCard
	
	^CreditCard expiringOn: self validCced withCcn: self validCcn andCco: self validCco! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/4/2022 19:02:59'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/4/2022 19:02:59'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/4/2022 19:02:59'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/4/2022 19:02:59'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 19:02:59'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/4/2022 19:02:59'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/4/2022 19:02:59'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/4/2022 19:02:59'!
ERROR!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/4/2022 19:02:59'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ms 11/4/2022 19:02:59'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ms 11/4/2022 19:02:59'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ms 11/4/2022 19:02:59'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ms 11/4/2022 19:02:59'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ms 11/4/2022 19:02:59'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ms 11/4/2022 19:02:59'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ms 11/4/2022 19:02:59'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ms 11/4/2022 19:02:59'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ms 11/4/2022 19:02:59'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ms 11/4/2022 19:02:59'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'ms 11/4/2022 19:02:59'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ms 11/4/2022 19:02:59'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ms 11/4/2022 19:02:59'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ms 11/4/2022 19:02:59'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/4/2022 19:02:59'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ms 11/4/2022 19:03:05'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ms 11/4/2022 19:03:05'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ms 11/4/2022 19:03:05'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ms 11/4/2022 19:03:05'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ms 11/4/2022 19:03:05'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ms 11/4/2022 19:03:05'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ms 11/4/2022 19:03:05'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ms 11/4/2022 19:03:05'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ms 11/4/2022 19:03:07'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ms 11/4/2022 19:03:07'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'ms 11/4/2022 19:03:07'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ms 11/4/2022 19:03:07'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ms 11/4/2022 19:03:07'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ms 11/4/2022 19:03:07'!
PASSED!

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/4/2022 19:03:09'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/4/2022 19:03:09'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/4/2022 19:03:09'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/4/2022 19:03:09'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 19:03:09'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/4/2022 19:03:09'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/4/2022 19:03:09'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/4/2022 19:03:09'!
ERROR!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/4/2022 19:03:09'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/4/2022 19:03:09'!
ERROR!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/4/2022 19:03:15'!
ERROR!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/4/2022 19:03:15'!
ERROR!
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 19:04:01' prior: 50557862!
test08CheckoutWithInvalidCcedThrowsError

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
		debitBehavior := [ :anAmount :aCreditCard | ].
	
		self should: [interface checkOutCart: testObjectsFactory cartId
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory invalidCced 
		withCco: testObjectsFactory validCco.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface invalidCartIdErrorMessage.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 19:04:03' prior: 50558373!
test08CheckoutWithInvalidCcedThrowsError

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
		debitBehavior := [ :anAmount :aCreditCard | ].
	
	self should: [interface checkOutCart: testObjectsFactory cartId
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory invalidCced 
		withCco: testObjectsFactory validCco.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface invalidCartIdErrorMessage.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 19:04:24' prior: 50558395!
test08CheckoutWithInvalidCcedThrowsError

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
		debitBehavior := [ :anAmount :aCreditCard | ].
	
	self should: [interface checkOutCart: testObjectsFactory cartId
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory invalidCced 
		withCco: testObjectsFactory validCco.] raise: Error - MessageNotUnderstood withMessageText: Cashier .! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 19:04:43' prior: 50558417!
test08CheckoutWithInvalidCcedThrowsError

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
		debitBehavior := [ :anAmount :aCreditCard | ].
	
	self should: [interface checkOutCart: testObjectsFactory cartId
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory invalidCced 
		withCco: testObjectsFactory validCco.] raise: Error - MessageNotUnderstood withMessageText: Cashier canNotChargeAnExpiredCreditCardErrorMessage.! !

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/4/2022 19:04:44'!
ERROR!
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 19:04:51' prior: 50558438!
test08CheckoutWithInvalidCcedThrowsError

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	self should: [interface checkOutCart: testObjectsFactory cartId
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory invalidCced 
		withCco: testObjectsFactory validCco.] raise: Error - MessageNotUnderstood withMessageText: Cashier canNotChargeAnExpiredCreditCardErrorMessage.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 19:04:54' prior: 50558464!
test08CheckoutWithInvalidCcedThrowsError

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	self should: [interface checkOutCart: cartId
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory invalidCced 
		withCco: testObjectsFactory validCco.] raise: Error - MessageNotUnderstood withMessageText: Cashier canNotChargeAnExpiredCreditCardErrorMessage.! !

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/4/2022 19:04:55'!
PASSED!

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/4/2022 19:04:55'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/4/2022 19:04:55'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/4/2022 19:04:55'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/4/2022 19:04:55'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 19:04:55'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/4/2022 19:04:55'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/4/2022 19:04:55'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/4/2022 19:04:55'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/4/2022 19:04:55'!
PASSED!
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 19:05:10' prior: 50557659!
test09CheckoutWithInvalidCcoThrowsError

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
		debitBehavior := [ :anAmount :aCreditCard | ].
	
	self assert: (interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory invalidCco) 
	equals: 1.! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'ms 11/4/2022 19:05:32'!
invalidCco
	^'abc;slkjdflaskjfglakjfgl;ksjdlf;kgjls;dfkjgl;sdkjfgl;skdjfgl;kj'! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'ms 11/4/2022 19:05:35' prior: 50558561!
invalidCco
	^'abc;slkjdflaskjfglakjfamsdnfkasnflkjgl;ksjdlf;kgjls;dfkjgl;sdkjfgl;skdjfgl;kj'! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/4/2022 19:05:51' prior: 50557822!
checkOutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| cart creditCard cashier |
	
	cart := cartSessions at: aCartId ifAbsent: [ self error: self class invalidCartIdErrorMessage ].
	creditCard := CreditCard expiringOn: aCced withCcn: aCcn andCco: aCco.
	cashier := Cashier toCheckout: cart charging: creditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook .
	
	cashier checkOut.
	
	^salesBook size! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/4/2022 19:06:39' prior: 50558573!
checkOutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| cart creditCard cashier |
	
	self assertValidCco: aCco.
	
	cart := cartSessions at: aCartId ifAbsent: [ self error: self class invalidCartIdErrorMessage ].
	creditCard := CreditCard expiringOn: aCced withCcn: aCcn andCco: aCco.
	cashier := Cashier toCheckout: cart charging: creditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook .
	
	cashier checkOut.
	
	^salesBook size! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/4/2022 19:06:41'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/4/2022 19:06:41'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/4/2022 19:06:41'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/4/2022 19:06:41'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 19:06:41'!
ERROR!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/4/2022 19:06:41'!
ERROR!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/4/2022 19:06:41'!
ERROR!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/4/2022 19:06:41'!
ERROR!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/4/2022 19:06:41'!
ERROR!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/4/2022 19:06:52'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/4/2022 19:06:54'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 19:06:55'!
ERROR!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 19:06:55'!
ERROR!
!StoreInterface methodsFor: 'testing' stamp: 'ms 11/4/2022 19:07:08'!
assertValidCco: aString 
	self shouldBeImplemented.! !
!StoreInterface methodsFor: 'testing' stamp: 'ms 11/4/2022 19:07:53' prior: 50558653!
assertValidCco: aCco 
	
	(aCco size > 30) ifTrue: [self error: self class invalidCardCcoToLongErrorMessage]! !

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 19:07:57'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 19:07:59'!
PASSED!

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/4/2022 19:07:59'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/4/2022 19:07:59'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/4/2022 19:07:59'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/4/2022 19:07:59'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 19:07:59'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/4/2022 19:07:59'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/4/2022 19:07:59'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/4/2022 19:07:59'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/4/2022 19:07:59'!
ERROR!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/4/2022 19:07:59'!
ERROR!
!StoreInterface class methodsFor: 'error description' stamp: 'ms 11/4/2022 19:08:04'!
invalidCardCcoToLongErrorMessage
	self shouldBeImplemented.! !
!StoreInterface class methodsFor: 'error description' stamp: 'ms 11/4/2022 19:08:16' prior: 50558707!
invalidCardCcoToLongErrorMessage
	
	^'Card CCO is to long'! !

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 19:08:20'!
PASSED!

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/4/2022 19:08:20'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/4/2022 19:08:20'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/4/2022 19:08:20'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/4/2022 19:08:20'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 19:08:20'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/4/2022 19:08:20'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/4/2022 19:08:20'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/4/2022 19:08:20'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/4/2022 19:08:20'!
ERROR!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/4/2022 19:08:20'!
ERROR!
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/4/2022 19:09:00' prior: 50558543!
test09CheckoutWithInvalidCcoThrowsError

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
		debitBehavior := [ :anAmount :aCreditCard | ].
	
	self should: [interface checkOutCart: cartId
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory invalidCco.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface invalidCardCcoToLongErrorMessage .! !

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/4/2022 19:09:01'!
PASSED!

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/4/2022 19:09:01'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/4/2022 19:09:01'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/4/2022 19:09:01'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/4/2022 19:09:01'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/4/2022 19:09:01'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/4/2022 19:09:01'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/4/2022 19:09:01'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/4/2022 19:09:01'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/4/2022 19:09:01'!
PASSED!

----QUIT----(5 November 2022 09:21:08) CuisUniversity-5481.image priorSource: 7059698!

----STARTUP---- (6 November 2022 17:15:23) as /Users/msaied/Documents/UBA/inge1/Imagenes/TusLibros/CuisUniversity-5481.image!


!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 17:15:45'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 17:15:45'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 17:15:45'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 17:15:45'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 17:15:45'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 17:15:45'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 17:15:45'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 17:15:45'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 17:15:45'!
PASSED!
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/6/2022 17:18:07'!
test10ListCartInvalidAfter30Minutes

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
		debitBehavior := [ :anAmount :aCreditCard | ].
	
	self should: [interface checkOutCart: cartId
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory invalidCco.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface invalidCardCcoToLongErrorMessage .! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/6/2022 17:18:30' prior: 50558852!
test10ListCartInvalidAfter30Minutes

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
		debitBehavior := [ :anAmount :aCreditCard | ].
	
	self should: [interface checkOutCart: cartId
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory invalidCco.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface invalidCardCcoToLongErrorMessage .! !
!StoreInterfaceTest methodsFor: 'setUp/tearDown' stamp: 'ms 11/6/2022 17:19:13' prior: 50556972 overrides: 16961394!
setUp
	
	testObjectsFactory := StoreTestObjectsFactory new.
	interface := StoreInterface withMP: self clientAuthenticator: self andCatalog: testObjectsFactory defaultCatalog andClockSercice: self.
	debitBehavior := [ :anAmount :aCreditCard | ].! !
!StoreInterface class methodsFor: 'instance creation' stamp: 'ms 11/6/2022 17:20:00'!
withMP: aMerchantProcessor clientAuthenticator: aClientAuthenticator andCatalog: aCatalog andClockService: aClockService  

	^self new initializeWithMP: aMerchantProcessor clientAuthenticator: aClientAuthenticator andCatalog: aCatalog ! !

!methodRemoval: StoreInterface class #withMP:clientAuthenticator:andCatalog: stamp: 'ms 11/6/2022 17:20:00'!
withMP: aMerchantProcessor clientAuthenticator: aClientAuthenticator andCatalog: aCatalog 

	^self new initializeWithMP: aMerchantProcessor clientAuthenticator: aClientAuthenticator andCatalog: aCatalog !
!StoreInterface methodsFor: 'initialization' stamp: 'ms 11/6/2022 17:20:44'!
initializeWithMP: aMerchantProcessor clientAuthenticator: aClientAuthenticator andCatalog: aCatalog andClockService: aClockService  
	merchantProcessor := aMerchantProcessor.
	clientAuthenticator := aClientAuthenticator.
	catalog := aCatalog.
	idCounter := 0.
	cartSessions := Dictionary new.
	salesBook := OrderedCollection new.! !
!StoreInterface class methodsFor: 'as yet unclassified' stamp: 'ms 11/6/2022 17:20:44' prior: 50558906!
withMP: aMerchantProcessor clientAuthenticator: aClientAuthenticator andCatalog: aCatalog andClockService: aClockService  

	^self new initializeWithMP: aMerchantProcessor clientAuthenticator: aClientAuthenticator andCatalog: aCatalog andClockService: self ! !

!methodRemoval: StoreInterface #initializeWithMP:clientAuthenticator:andCatalog: stamp: 'ms 11/6/2022 17:20:44'!
initializeWithMP: aMerchantProcessor clientAuthenticator: aClientAuthenticator andCatalog: aCatalog 
	merchantProcessor := aMerchantProcessor.
	clientAuthenticator := aClientAuthenticator.
	catalog := aCatalog.
	idCounter := 0.
	cartSessions := Dictionary new.
	salesBook := OrderedCollection new.!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'ms 11/6/2022 17:20:56'!
Object subclass: #StoreInterface
	instanceVariableNames: 'merchantProcessor clientAuthenticator carts salesBook catalog cartSessions idCounter clockService'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'initialization' stamp: 'ms 11/6/2022 17:21:00' prior: 50558926!
initializeWithMP: aMerchantProcessor clientAuthenticator: aClientAuthenticator andCatalog: aCatalog andClockService: aClockService  
	merchantProcessor := aMerchantProcessor.
	clientAuthenticator := aClientAuthenticator.
	clockService := aClockService.
	catalog := aCatalog.
	idCounter := 0.
	cartSessions := Dictionary new.
	salesBook := OrderedCollection new.! !
!StoreInterface class methodsFor: 'instance creation' stamp: 'ms 11/6/2022 17:21:08' prior: 50558940!
withMP: aMerchantProcessor clientAuthenticator: aClientAuthenticator andCatalog: aCatalog andClockService: aClockService  

	^self new initializeWithMP: aMerchantProcessor clientAuthenticator: aClientAuthenticator andCatalog: aCatalog andClockService: aClockService ! !
!StoreInterface class methodsFor: 'instance creation' stamp: 'ms 11/6/2022 17:21:16' prior: 50558989!
withMP: aMerchantProcessor clientAuthenticator: aClientAuthenticator andCatalog: aCatalog andClockService: aClockService  

	^self new initializeWithMP: aMerchantProcessor 
			clientAuthenticator: aClientAuthenticator 
			andCatalog: aCatalog 
			andClockService: aClockService ! !

Object subclass: #CartSession
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartSession category: 'TusLibros' stamp: 'ms 11/6/2022 17:22:27'!
Object subclass: #CartSession
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #CartSession
	instanceVariableNames: 'id createdAt cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartSession category: 'TusLibros' stamp: 'ms 11/6/2022 17:23:13'!
Object subclass: #CartSession
	instanceVariableNames: 'id createdAt cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterfaceTest methodsFor: 'setUp/tearDown' stamp: 'ms 11/6/2022 17:27:44' prior: 50558895 overrides: 16961394!
setUp
	
	testObjectsFactory := StoreTestObjectsFactory new.
	interface := StoreInterface withMP: self clientAuthenticator: self andCatalog: testObjectsFactory defaultCatalog andClockService: self.
	debitBehavior := [ :anAmount :aCreditCard | ].! !
!CartSession class methodsFor: 'nil' stamp: 'ms 11/6/2022 17:30:51'!
withCart: aCart at: aTimestamp
	self new initializeWithCart: aCart at: aTimestamp! !
!CartSession class methodsFor: 'as yet unclassified' stamp: 'ms 11/6/2022 17:30:58' prior: 50559046!
withCart: aCart at: aTimestamp
	^self new initializeWithCart: aCart at: aTimestamp! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 17:33:11' prior: 50552889!
createCartWithId: aClientId andPassword: aPassword 
	|cartSession|
	self assertCorrectClientId: aClientId andPassword: aPassword.
	cartSession := CartSession withCart: (Cart acceptingItemsOf: catalog) at: clockService now. 
	
	cartSessions add: (cartSession cartId->cartSession).
	^idCounter.! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 17:33:38' prior: 50559058!
createCartWithId: aClientId andPassword: aPassword 
	|cartSession|
	self assertCorrectClientId: aClientId andPassword: aPassword.
	cartSession := CartSession withCart: (Cart acceptingItemsOf: catalog) at: clockService now. 
	
	cartSessions add: ((cartSession cartId)->cartSession).
	^cartSession cartId.! !
!StoreInterface methodsFor: 'initialization' stamp: 'ms 11/6/2022 17:33:44' prior: 50558974!
initializeWithMP: aMerchantProcessor clientAuthenticator: aClientAuthenticator andCatalog: aCatalog andClockService: aClockService  
	merchantProcessor := aMerchantProcessor.
	clientAuthenticator := aClientAuthenticator.
	clockService := aClockService.
	catalog := aCatalog.
	cartSessions := Dictionary new.
	salesBook := OrderedCollection new.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/6/2022 17:35:02' prior: 50558873!
test10ListCartInvalidAfter30Minutes

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self advance30Mins.
	
	self should: [interface listCart: cartId.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface cartLifetimeTimeoutErrorMessage .! !

!testRun: #StoreInterfaceTest #test10ListCartInvalidAfter30Minutes stamp: 'ms 11/6/2022 17:35:06'!
ERROR!
!StoreInterfaceTest methodsFor: 'support' stamp: 'ms 11/6/2022 17:35:15'!
now
	self shouldBeImplemented.! !

!classDefinition: #StoreInterfaceTest category: 'TusLibros' stamp: 'ms 11/6/2022 17:37:03'!
TestCase subclass: #StoreInterfaceTest
	instanceVariableNames: 'interface testObjectsFactory debitBehavior timeShift'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterfaceTest methodsFor: 'support' stamp: 'ms 11/6/2022 17:36:58' prior: 50559117!
now
	DateAndTime now + timeShift.! !
!StoreInterfaceTest methodsFor: 'setUp/tearDown' stamp: 'ms 11/6/2022 17:37:52' prior: 50559036 overrides: 16961394!
setUp
	
	testObjectsFactory := StoreTestObjectsFactory new.
	interface := StoreInterface withMP: self clientAuthenticator: self andCatalog: testObjectsFactory defaultCatalog andClockService: self.
	debitBehavior := [ :anAmount :aCreditCard | ].
	timeShift := Duration zero.! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 17:37:53'!
ERROR!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 17:37:53'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 17:37:53'!
ERROR!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 17:37:53'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 17:37:53'!
ERROR!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 17:37:53'!
ERROR!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 17:37:53'!
ERROR!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 17:37:53'!
ERROR!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 17:37:53'!
ERROR!

!testRun: #StoreInterfaceTest #test10ListCartInvalidAfter30Minutes stamp: 'ms 11/6/2022 17:37:53'!
ERROR!

!testRun: #StoreInterfaceTest #test10ListCartInvalidAfter30Minutes stamp: 'ms 11/6/2022 17:37:58'!
ERROR!

!classDefinition: #CartSession category: 'TusLibros' stamp: 'ms 11/6/2022 17:38:17'!
Object subclass: #CartSession
	instanceVariableNames: 'id createdAt cart timestamp'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartSession methodsFor: 'initialization' stamp: 'ms 11/6/2022 17:38:17'!
initializeWithCart: aCart at: aTimestamp 
	self shouldBeImplemented.
	cart := aCart.
	timestamp := aTimestamp.! !
!CartSession methodsFor: 'initialization' stamp: 'ms 11/6/2022 17:42:58' prior: 50559192!
initializeWithCart: aCart at: aTimestamp 
	id := Random new next.
	cart := aCart.
	timestamp := aTimestamp.! !

!testRun: #StoreInterfaceTest #test10ListCartInvalidAfter30Minutes stamp: 'ms 11/6/2022 17:43:01'!
ERROR!
!CartSession methodsFor: 'accessing' stamp: 'ms 11/6/2022 17:43:10'!
cartId
	self shouldBeImplemented.! !
!CartSession methodsFor: 'accessing' stamp: 'ms 11/6/2022 17:43:22' prior: 50559208!
cartId
	^id ! !

!testRun: #StoreInterfaceTest #test10ListCartInvalidAfter30Minutes stamp: 'ms 11/6/2022 17:43:24'!
ERROR!
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 17:43:44' prior: 50552883!
addToCart: aCartId book: aBook withQuantity: aQuantity 
	
	(cartSessions at: aCartId) cart add: aQuantity of: aBook.! !

!testRun: #StoreInterfaceTest #test10ListCartInvalidAfter30Minutes stamp: 'ms 11/6/2022 17:43:47'!
ERROR!
!CartSession methodsFor: 'accessing' stamp: 'ms 11/6/2022 17:43:54'!
cart
	self shouldBeImplemented.
	^cart! !
!CartSession methodsFor: 'accessing' stamp: 'ms 11/6/2022 17:43:58' prior: 50559229!
cart
	^cart! !

!testRun: #StoreInterfaceTest #test10ListCartInvalidAfter30Minutes stamp: 'ms 11/6/2022 17:44:00'!
ERROR!
!StoreInterfaceTest methodsFor: 'support' stamp: 'ms 11/6/2022 17:44:09'!
advance30Mins
	self shouldBeImplemented.! !
!StoreInterfaceTest methodsFor: 'support' stamp: 'ms 11/6/2022 17:44:46' prior: 50559240!
advance30Mins
	timeShift  := Duration minutes: 30! !

!testRun: #StoreInterfaceTest #test10ListCartInvalidAfter30Minutes stamp: 'ms 11/6/2022 17:44:49'!
ERROR!
!StoreInterface class methodsFor: 'error description' stamp: 'ms 11/6/2022 17:44:59'!
cartLifetimeTimeoutErrorMessage
	self shouldBeImplemented.! !
!StoreInterface class methodsFor: 'error description' stamp: 'ms 11/6/2022 17:45:22' prior: 50559253!
cartLifetimeTimeoutErrorMessage
	^'No puede usar un carrito despues de 30 minutos de su creacion'! !

!testRun: #StoreInterfaceTest #test10ListCartInvalidAfter30Minutes stamp: 'ms 11/6/2022 17:45:22'!
ERROR!
!StoreInterface methodsFor: 'initialization' stamp: 'ms 11/6/2022 17:46:01' prior: 50556152!
listCart: aCartId 
	
	| cartSession |
	
	cartSession := cartSessions at: aCartId ifAbsent: [self error: self class invalidCartIdErrorMessage ].
	
	^cartSession cart items 
		inject: (Dictionary new)
		into: [ :aDict :item | 
			aDict at: item put: (aDict at: item ifAbsent: [0]) + 1. aDict
		].! !

!testRun: #StoreInterfaceTest #test10ListCartInvalidAfter30Minutes stamp: 'ms 11/6/2022 17:46:03'!
FAILURE!
!StoreInterface methodsFor: 'initialization' stamp: 'ms 11/6/2022 17:46:48' prior: 50559269!
listCart: aCartId 
	
	| cartSession |
	
	cartSession := cartSessions at: aCartId ifAbsent: [self error: self class invalidCartIdErrorMessage ].
	
	self assertTimeout: cartSession.
	
	^cartSession cart items 
		inject: (Dictionary new)
		into: [ :aDict :item | 
			aDict at: item put: (aDict at: item ifAbsent: [0]) + 1. aDict
		].! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 17:46:52'!
ERROR!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 17:46:52'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 17:46:52'!
ERROR!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 17:46:52'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 17:46:52'!
ERROR!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 17:46:52'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 17:46:52'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 17:46:52'!
ERROR!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 17:46:52'!
PASSED!

!testRun: #StoreInterfaceTest #test10ListCartInvalidAfter30Minutes stamp: 'ms 11/6/2022 17:46:52'!
ERROR!

!testRun: #StoreInterfaceTest #test10ListCartInvalidAfter30Minutes stamp: 'ms 11/6/2022 17:46:55'!
ERROR!
!StoreInterface methodsFor: 'assertions' stamp: 'ms 11/6/2022 17:47:08'!
assertTimeout: aCartSession 
	self shouldBeImplemented.! !
!StoreInterface methodsFor: 'assertions' stamp: 'ms 11/6/2022 17:49:09' prior: 50559336!
assertTimeout: aCartSession 
	(aCartSession createdAt + Duration minutes: 30 < clockService now) ifTrue: [self error: self class cartLifetimeTimeoutErrorMessage ]! !

!testRun: #StoreInterfaceTest #test10ListCartInvalidAfter30Minutes stamp: 'ms 11/6/2022 17:49:14'!
ERROR!
!CartSession methodsFor: 'accessing' stamp: 'ms 11/6/2022 17:49:20'!
createdAt
	self shouldBeImplemented.
	^createdAt! !
!CartSession methodsFor: 'accessing' stamp: 'ms 11/6/2022 17:49:32' prior: 50559352!
createdAt
	^createdAt copy.! !

!testRun: #StoreInterfaceTest #test10ListCartInvalidAfter30Minutes stamp: 'ms 11/6/2022 17:49:33'!
ERROR!
!StoreInterfaceTest methodsFor: 'support' stamp: 'ms 11/6/2022 17:51:03' prior: 50559130!
now
	^DateAndTime now + timeShift.! !
!CartSession methodsFor: 'accessing' stamp: 'ms 11/6/2022 17:51:33' prior: 50559357!
createdAt
	^createdAt copy.! !
!CartSession methodsFor: 'initialization' stamp: 'ms 11/6/2022 17:51:42' prior: 50559199!
initializeWithCart: aCart at: aTimestamp 
	id := Random new next.
	cart := aCart.
	createdAt := aTimestamp.! !

Object subclass: #CartSession
	instanceVariableNames: 'id createdAt cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartSession category: 'TusLibros' stamp: 'ms 11/6/2022 17:51:46'!
Object subclass: #CartSession
	instanceVariableNames: 'id createdAt cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Duration class!

operand!
!StoreInterface methodsFor: 'assertions' stamp: 'ms 11/6/2022 17:53:19' prior: 50559341!
assertTimeout: aCartSession 
	((aCartSession createdAt + (Duration minutes: 30)) < clockService now) ifTrue: [self error: self class cartLifetimeTimeoutErrorMessage ]! !

!testRun: #StoreInterfaceTest #test10ListCartInvalidAfter30Minutes stamp: 'ms 11/6/2022 17:53:20'!
PASSED!

!testRun: #StoreInterfaceTest #test10ListCartInvalidAfter30Minutes stamp: 'ms 11/6/2022 17:53:23'!
FAILURE!
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/6/2022 17:53:52' prior: 50559098!
test10ListCartInvalidAfter30Minutes

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self advance30Mins.	self advance30Mins.
	
	self should: [interface listCart: cartId.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface cartLifetimeTimeoutErrorMessage .! !

!testRun: #StoreInterfaceTest #test10ListCartInvalidAfter30Minutes stamp: 'ms 11/6/2022 17:53:53'!
FAILURE!
!StoreInterface methodsFor: 'assertions' stamp: 'ms 11/6/2022 17:54:57' prior: 50559392!
assertTimeout: aCartSession 
self halt.
	((aCartSession createdAt + (Duration minutes: 30)) < clockService now) ifTrue: [self error: self class cartLifetimeTimeoutErrorMessage ]! !

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 17:54:58'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 17:54:58'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 17:54:58'!
ERROR!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 17:54:58'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 17:54:58'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 17:54:58'!
ERROR!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 17:54:58'!
PASSED!

aCartSession createdAt!

(aCartSession createdAt + (Duration minutes: 30)) !

clockService now!

!testRun: #StoreInterfaceTest #test10ListCartInvalidAfter30Minutes stamp: 'ms 11/6/2022 17:56:58'!
PASSED!

!testRun: #StoreInterfaceTest #test10ListCartInvalidAfter30Minutes stamp: 'ms 11/6/2022 17:57:14'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 17:57:14'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 17:57:14'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 17:57:14'!
ERROR!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 17:57:14'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 17:57:14'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 17:57:14'!
ERROR!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 17:57:14'!
PASSED!
!StoreInterface methodsFor: 'assertions' stamp: 'ms 11/6/2022 17:57:36' prior: 50559428!
assertTimeout: aCartSession 

	((aCartSession createdAt + (Duration minutes: 30)) < clockService now) ifTrue: [self error: self class cartLifetimeTimeoutErrorMessage ]! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 17:57:36'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 17:57:36'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 17:57:36'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 17:57:36'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 17:57:36'!
ERROR!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 17:57:36'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 17:57:36'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 17:57:37'!
ERROR!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 17:57:37'!
PASSED!

!testRun: #StoreInterfaceTest #test10ListCartInvalidAfter30Minutes stamp: 'ms 11/6/2022 17:57:37'!
FAILURE!

!testRun: #StoreInterfaceTest #test10ListCartInvalidAfter30Minutes stamp: 'ms 11/6/2022 17:57:46'!
FAILURE!

!testRun: #StoreInterfaceTest #test10ListCartInvalidAfter30Minutes stamp: 'ms 11/6/2022 17:57:46'!
FAILURE!
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/6/2022 17:57:59' prior: 50559408!
test10ListCartInvalidAfter30Minutes

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	
	
	self should: [interface listCart: cartId.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface cartLifetimeTimeoutErrorMessage .! !

!testRun: #StoreInterfaceTest #test10ListCartInvalidAfter30Minutes stamp: 'ms 11/6/2022 17:58:00'!
FAILURE!
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/6/2022 17:58:05' prior: 50559547!
test10ListCartInvalidAfter30Minutes

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self advance30Mins.
	
	self should: [interface listCart: cartId.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface cartLifetimeTimeoutErrorMessage .! !

!testRun: #StoreInterfaceTest #test10ListCartInvalidAfter30Minutes stamp: 'ms 11/6/2022 17:58:06'!
FAILURE!

!testRun: #StoreInterfaceTest #test10ListCartInvalidAfter30Minutes stamp: 'ms 11/6/2022 17:58:12'!
FAILURE!
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/6/2022 17:59:37' prior: 50559566!
test10ListCartInvalidAfter30Minutes

	| cartId listCart |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self advance30Mins.
	
	listCart := interface listCart
	self should: [interface listCart: cartId.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface cartLifetimeTimeoutErrorMessage .! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/6/2022 17:59:47' prior: 50559589!
test10ListCartInvalidAfter30Minutes

	| cartId listCart |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self advance30Mins.
	
	listCart := interface listCart: cartId.
	self should: [interface listCart: cartId.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface cartLifetimeTimeoutErrorMessage .! !

!testRun: #StoreInterfaceTest #test10ListCartInvalidAfter30Minutes stamp: 'ms 11/6/2022 17:59:51'!
FAILURE!
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/6/2022 17:59:57' prior: 50559607!
test10ListCartInvalidAfter30Minutes

	| cartId listCart |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self advance30Mins.
	
	listCart := interface listCart: cartId.
	self halt.
	self should: [interface listCart: cartId.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface cartLifetimeTimeoutErrorMessage .! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/6/2022 18:00:17' prior: 50559629!
test10ListCartInvalidAfter30Minutes

	| cartId listCart |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self advance30Mins.
	
	listCart := interface listCart: cartId.

	self should: [interface listCart: cartId.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface cartLifetimeTimeoutErrorMessage .! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/6/2022 18:00:20' prior: 50559647!
test10ListCartInvalidAfter30Minutes

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self advance30Mins.
	


	self should: [interface listCart: cartId.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface cartLifetimeTimeoutErrorMessage .! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/6/2022 18:00:24' prior: 50559665!
test10ListCartInvalidAfter30Minutes

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self advance30Mins.

	self should: [interface listCart: cartId.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface cartLifetimeTimeoutErrorMessage .! !
!StoreInterface methodsFor: 'initialization' stamp: 'ms 11/6/2022 18:00:41' prior: 50559285!
listCart: aCartId 
	
	| cartSession |
	
	cartSession := cartSessions at: aCartId ifAbsent: [self error: self class invalidCartIdErrorMessage ].
	
	self halt.
	self assertTimeout: cartSession.
	
	^cartSession cart items 
		inject: (Dictionary new)
		into: [ :aDict :item | 
			aDict at: item put: (aDict at: item ifAbsent: [0]) + 1. aDict
		].! !

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 18:00:42'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 18:00:42'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 18:00:42'!
ERROR!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 18:00:42'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 18:00:42'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 18:00:42'!
ERROR!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 18:00:42'!
PASSED!
!StoreInterface methodsFor: 'initialization' stamp: 'ms 11/6/2022 18:03:18' prior: 50559698!
listCart: aCartId 
	
	| cartSession |
	
	cartSession := cartSessions at: aCartId ifAbsent: [self error: self class invalidCartIdErrorMessage ].
	

	self assertTimeout: cartSession.
	
	^cartSession cart items 
		inject: (Dictionary new)
		into: [ :aDict :item | 
			aDict at: item put: (aDict at: item ifAbsent: [0]) + 1. aDict
		].! !
!StoreInterfaceTest methodsFor: 'support' stamp: 'ms 11/6/2022 18:03:32' prior: 50559245!
advance30Mins
	timeShift  := timeShift + Duration minutes: 30! !
!StoreInterfaceTest methodsFor: 'support' stamp: 'ms 11/6/2022 18:03:34' prior: 50559751!
advance30Mins
	timeShift  :=  Duration minutes: 30! !
!StoreInterfaceTest methodsFor: 'support' stamp: 'ms 11/6/2022 18:03:35' prior: 50559756!
advance30Mins
	timeShift  := Duration minutes: 30! !
!StoreInterfaceTest methodsFor: 'support' stamp: 'ms 11/6/2022 18:03:39' prior: 50559761!
advance30Mins
	timeShift  := Duration minutes: 31! !
!StoreInterfaceTest methodsFor: 'support' stamp: 'ms 11/6/2022 18:03:42'!
advance31Mins
	timeShift  := Duration minutes: 31! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/6/2022 18:03:49' prior: 50559682!
test10ListCartInvalidAfter30Minutes

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self advance31Mins.

	self should: [interface listCart: cartId.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface cartLifetimeTimeoutErrorMessage .! !

!testRun: #StoreInterfaceTest #test10ListCartInvalidAfter30Minutes stamp: 'ms 11/6/2022 18:03:50'!
PASSED!

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 18:03:50'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 18:03:50'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 18:03:50'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 18:03:50'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 18:03:50'!
ERROR!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 18:03:50'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 18:03:50'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 18:03:50'!
ERROR!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 18:03:50'!
PASSED!

!testRun: #StoreInterfaceTest #test10ListCartInvalidAfter30Minutes stamp: 'ms 11/6/2022 18:03:50'!
PASSED!

!testRun: #StoreInterfaceTest #test10ListCartInvalidAfter30Minutes stamp: 'ms 11/6/2022 18:04:08'!
PASSED!

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 18:04:08'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 18:04:08'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 18:04:08'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 18:04:08'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 18:04:08'!
ERROR!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 18:04:08'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 18:04:08'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 18:04:08'!
ERROR!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 18:04:08'!
PASSED!

!testRun: #StoreInterfaceTest #test10ListCartInvalidAfter30Minutes stamp: 'ms 11/6/2022 18:04:08'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 18:04:28'!
ERROR!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 18:04:28'!
ERROR!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 18:04:40'!
ERROR!
!Cashier class methodsFor: 'assertions' stamp: 'ms 11/6/2022 18:04:55' prior: 50552742!
assertIsNotEmpty: aCartSession
	
	aCartSession cart isEmpty ifTrue: [self error: self cartCanNotBeEmptyErrorMessage ]! !
!Cashier class methodsFor: 'assertions' stamp: 'ms 11/6/2022 18:05:16' prior: 50559878!
assertIsNotEmpty: aCart
	
	aCart isEmpty ifTrue: [self error: self cartCanNotBeEmptyErrorMessage ]! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 18:05:44' prior: 50558590!
checkOutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| creditCard cashier cartSession |
	
	self assertValidCco: aCco.
	
	cartSession := cartSessions at: aCartId ifAbsent: [ self error: self class invalidCartIdErrorMessage ].
	creditCard := CreditCard expiringOn: aCced withCcn: aCcn andCco: aCco.
	cashier := Cashier toCheckout: cartSession cart charging: creditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook .
	
	cashier checkOut.
	
	^salesBook size! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 18:05:45'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 18:05:45'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 18:05:45'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 18:05:45'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 18:05:45'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 18:05:45'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 18:05:45'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 18:05:45'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 18:05:45'!
PASSED!

!testRun: #StoreInterfaceTest #test10ListCartInvalidAfter30Minutes stamp: 'ms 11/6/2022 18:05:45'!
PASSED!
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/6/2022 18:06:35'!
test10ListCartInvalidAfter31Minutes

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self advance31Mins.

	self should: [interface listCart: cartId.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface cartLifetimeTimeoutErrorMessage .! !

!methodRemoval: StoreInterfaceTest #test10ListCartInvalidAfter30Minutes stamp: 'ms 11/6/2022 18:06:39'!
test10ListCartInvalidAfter30Minutes

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self advance31Mins.

	self should: [interface listCart: cartId.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface cartLifetimeTimeoutErrorMessage .!
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/6/2022 18:06:57'!
test10AddToCartInvalidAfter31Minutes

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self advance31Mins.

	self should: [interface listCart: cartId.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface cartLifetimeTimeoutErrorMessage .! !

!methodRemoval: StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 18:07:03'!
test10AddToCartInvalidAfter31Minutes

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self advance31Mins.

	self should: [interface listCart: cartId.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface cartLifetimeTimeoutErrorMessage .!
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/6/2022 18:07:10'!
test101AddToCartInvalidAfter31Minutes

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self advance31Mins.

	self should: [interface listCart: cartId.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface cartLifetimeTimeoutErrorMessage .! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/6/2022 18:07:25'!
test11AddToCartInvalidAfter31Minutes

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self advance31Mins.

	self should: [interface listCart: cartId.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface cartLifetimeTimeoutErrorMessage .! !

!methodRemoval: StoreInterfaceTest #test101AddToCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 18:07:27'!
test101AddToCartInvalidAfter31Minutes

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self advance31Mins.

	self should: [interface listCart: cartId.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface cartLifetimeTimeoutErrorMessage .!
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/6/2022 18:10:43'!
test11ListCartInvalidAfter31Minutes

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self advance31Mins.

	self should: [interface listCart: cartId.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface cartLifetimeTimeoutErrorMessage .! !

!methodRemoval: StoreInterfaceTest #test10ListCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 18:10:47'!
test10ListCartInvalidAfter31Minutes

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self advance31Mins.

	self should: [interface listCart: cartId.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface cartLifetimeTimeoutErrorMessage .!
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/6/2022 18:10:51'!
test10AddToCartInvalidAfter31Minutes

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self advance31Mins.

	self should: [interface listCart: cartId.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface cartLifetimeTimeoutErrorMessage .! !

!methodRemoval: StoreInterfaceTest #test11AddToCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 18:10:53'!
test11AddToCartInvalidAfter31Minutes

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self advance31Mins.

	self should: [interface listCart: cartId.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface cartLifetimeTimeoutErrorMessage .!
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/6/2022 18:11:12' prior: 50560089!
test10AddToCartInvalidAfter31Minutes

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	
	
	self advance31Mins.

	self should: [interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface cartLifetimeTimeoutErrorMessage .! !

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 18:11:14'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 18:11:56' prior: 50559219!
addToCart: aCartId book: aBook withQuantity: aQuantity 
	|cartSession|
	(cartSessions at: aCartId) cart add: aQuantity of: aBook.! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 18:14:03' prior: 50560141!
addToCart: aCartId book: aBook withQuantity: aQuantity 
	|cartSession|
	cartSession := cartSessions at: aCartId.
	self assertTimeout: cartSession.
	cartSession cart add: aQuantity of: aBook.! !

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 18:14:09'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 18:14:13'!
PASSED!

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 18:14:15'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 18:14:15'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 18:14:15'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 18:14:15'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 18:14:15'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 18:14:15'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 18:14:15'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 18:14:15'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 18:14:15'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 18:14:15'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 18:14:15'!
PASSED!
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/6/2022 18:15:21'!
test12CheckoutCartInvalidAfter31Minutes

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self advance31Mins.

	self should: [interface listCart: cartId.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface cartLifetimeTimeoutErrorMessage .! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/6/2022 18:15:47' prior: 50560203!
test12CheckoutCartInvalidAfter31Minutes

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self advance31Mins.

	self should: [interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface cartLifetimeTimeoutErrorMessage .! !

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 18:15:48'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 18:16:18' prior: 50559891!
checkOutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| creditCard cashier cartSession |
	
	self assertValidCco: aCco.
	
	cartSession := cartSessions at: aCartId ifAbsent: [ self error: self class invalidCartIdErrorMessage ].
	self assertTimeout: cartSession.
	creditCard := CreditCard expiringOn: aCced withCcn: aCcn andCco: aCco.
	cashier := Cashier toCheckout: cartSession cart charging: creditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook .
	
	cashier checkOut.
	
	^salesBook size! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 18:16:19'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 18:16:19'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 18:16:19'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 18:16:19'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 18:16:19'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 18:16:19'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 18:16:19'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 18:16:19'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 18:16:19'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 18:16:19'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 18:16:19'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 18:16:19'!
PASSED!
!CartSession methodsFor: 'initialization' stamp: 'ms 11/6/2022 18:20:54'!
initializeWithCart: aCart at: aTimestamp forClient: aClientId
	id := Random new next.
	cart := aCart.
	createdAt := aTimestamp.! !

!methodRemoval: CartSession #initializeWithCart:at: stamp: 'ms 11/6/2022 18:20:59'!
initializeWithCart: aCart at: aTimestamp 
	id := Random new next.
	cart := aCart.
	createdAt := aTimestamp.!

!classDefinition: #CartSession category: 'TusLibros' stamp: 'ms 11/6/2022 18:21:17'!
Object subclass: #CartSession
	instanceVariableNames: 'id createdAt cart clientId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartSession methodsFor: 'initialization' stamp: 'ms 11/6/2022 18:21:15' prior: 50560306!
initializeWithCart: aCart at: aTimestamp forClient: aClientId
	id := Random new next.
	cart := aCart.
	createdAt := aTimestamp.
	clientId :=aClientId! !
!CartSession class methodsFor: 'as yet unclassified' stamp: 'ms 11/6/2022 18:21:30'!
withCart: aCart at: aTimestamp forClient: aClientId
	^self new initializeWithCart: aCart at: aTimestamp! !

!methodRemoval: CartSession class #withCart:at: stamp: 'ms 11/6/2022 18:21:33'!
withCart: aCart at: aTimestamp
	^self new initializeWithCart: aCart at: aTimestamp!
!CartSession class methodsFor: 'as yet unclassified' stamp: 'ms 11/6/2022 18:21:41' prior: 50560335!
withCart: aCart at: aTimestamp forClient: aClientId
	^self new initializeWithCart: aCart at: aTimestamp forClient: aClientId! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 18:22:03' prior: 50559070!
createCartWithId: aClientId andPassword: aPassword 
	|cartSession|
	self assertCorrectClientId: aClientId andPassword: aPassword.
	cartSession := CartSession withCart: (Cart acceptingItemsOf: catalog) at: clockService now forClient: aClientId. 
	
	cartSessions add: ((cartSession cartId)->cartSession).
	^cartSession cartId.! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 18:22:05'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 18:22:05'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 18:22:05'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 18:22:05'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 18:22:05'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 18:22:05'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 18:22:05'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 18:22:05'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 18:22:05'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 18:22:05'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 18:22:05'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 18:22:05'!
PASSED!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'ms 11/6/2022 18:28:58'!
Object subclass: #StoreInterface
	instanceVariableNames: 'merchantProcessor clientAuthenticator carts salesBook catalog cartSessions idCounter clockService clientsTransactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 18:30:39' prior: 50560244!
checkOutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| creditCard cashier cartSession |
	
	self assertValidCco: aCco.
	
	cartSession := cartSessions at: aCartId ifAbsent: [ self error: self class invalidCartIdErrorMessage ].
	self assertTimeout: cartSession.
	creditCard := CreditCard expiringOn: aCced withCcn: aCcn andCco: aCco.
	cashier := Cashier toCheckout: cartSession cart charging: creditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook .
	
	cashier checkOut.
	
	(clientsTransactions at: cartSession clientId 
	ifAbsent: [clientsTransactions at: cartSession clientId put: OrderedCollection new]) add: (Random new next) -> salesBook last.
	^(clientsTransactions at: cartSession clientId ) key
	! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 18:30:41'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 18:30:41'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 18:30:41'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 18:30:41'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 18:30:41'!
ERROR!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 18:30:41'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 18:30:41'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 18:30:41'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 18:30:41'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 18:30:41'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 18:30:41'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 18:30:41'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 18:30:41'!
ERROR!
!CartSession methodsFor: 'accessing' stamp: 'ms 11/6/2022 18:30:46'!
clientId
	self shouldBeImplemented.
	^clientId! !
!CartSession methodsFor: 'accessing' stamp: 'ms 11/6/2022 18:30:51' prior: 50560492!
clientId
	^clientId! !

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 18:30:52'!
ERROR!
!StoreInterface methodsFor: 'initialization' stamp: 'ms 11/6/2022 18:31:38' prior: 50559083!
initializeWithMP: aMerchantProcessor clientAuthenticator: aClientAuthenticator andCatalog: aCatalog andClockService: aClockService  
	merchantProcessor := aMerchantProcessor.
	clientAuthenticator := aClientAuthenticator.
	clockService := aClockService.
	catalog := aCatalog.
	cartSessions := Dictionary new.
	salesBook := OrderedCollection new.
	clientsTransactions := Dictionary new.! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 18:31:42'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 18:31:42'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 18:31:42'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 18:31:42'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 18:31:42'!
ERROR!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 18:31:42'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 18:31:42'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 18:31:42'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 18:31:42'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 18:31:42'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 18:31:42'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 18:31:42'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 18:31:42'!
ERROR!
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 18:32:03' prior: 50560420!
checkOutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| creditCard cashier cartSession |
	
	self assertValidCco: aCco.
	
	cartSession := cartSessions at: aCartId ifAbsent: [ self error: self class invalidCartIdErrorMessage ].
	self assertTimeout: cartSession.
	creditCard := CreditCard expiringOn: aCced withCcn: aCcn andCco: aCco.
	cashier := Cashier toCheckout: cartSession cart charging: creditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook .
	
	cashier checkOut.
	
	(clientsTransactions at: cartSession clientId 
	ifAbsent: [clientsTransactions at: cartSession clientId put: OrderedCollection new]) add: (Random new next) -> salesBook last.
	^(clientsTransactions at: cartSession clientId ) last key
	! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 18:32:04'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 18:32:04'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 18:32:04'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 18:32:04'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 18:32:04'!
FAILURE!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 18:32:04'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 18:32:04'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 18:32:04'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 18:32:04'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 18:32:04'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 18:32:04'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 18:32:04'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 18:32:04'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 18:33:08' prior: 50560566!
checkOutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| creditCard cashier cartSession |
	
	self assertValidCco: aCco.
	
	cartSession := cartSessions at: aCartId ifAbsent: [ self error: self class invalidCartIdErrorMessage ].
	self assertTimeout: cartSession.
	creditCard := CreditCard expiringOn: aCced withCcn: aCcn andCco: aCco.
	cashier := Cashier toCheckout: cartSession cart charging: creditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook .
	
	cashier checkOut.
	
	(clientsTransactions at: cartSession clientId 
	ifAbsent: [clientsTransactions at: cartSession clientId put: OrderedCollection new]) add: (Random new next) -> salesBook last.
	^(clientsTransactions at: cartSession clientId ) last key
	! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/6/2022 18:34:20' prior: 50557737!
test05CheckoutCartReturnsTransactionId

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	

	
	self assert: (interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco) 
	equals: 1.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/6/2022 20:18:39' prior: 50560665!
test05CheckoutCartReturnsTransactionId

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	

	
	self assert: (interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco) 
	equals: (interface listPurchases: self validClientId) .! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/6/2022 20:22:09' prior: 50560682!
test05CheckoutCartReturnsTransactionId

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	

	
	self assert: (interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco).! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/6/2022 20:22:41' prior: 50560701!
test05CheckoutCartReturnsTransactionId

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	

	
	self assert: (interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco) class equals: Integer
! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/6/2022 20:22:42' prior: 50560718!
test05CheckoutCartReturnsTransactionId

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	

	
	self assert: (interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco) class equals: Integer.
! !

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 20:22:44'!
FAILURE!
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/6/2022 20:25:28' prior: 50560735!
test05CheckoutCartReturnsTransactionId

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	

	
	self assert: (interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco) class equals: SmallFloat64.
! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 20:26:44' prior: 50560638!
checkOutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| creditCard cashier cartSession |
	
	self assertValidCco: aCco.
	
	cartSession := cartSessions at: aCartId ifAbsent: [ self error: self class invalidCartIdErrorMessage ].
	self assertTimeout: cartSession.
	creditCard := CreditCard expiringOn: aCced withCcn: aCcn andCco: aCco.
	cashier := Cashier toCheckout: cartSession cart charging: creditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook .
	
	cashier checkOut.
	
	(clientsTransactions at: cartSession clientId 
	ifAbsent: [clientsTransactions at: cartSession clientId put: OrderedCollection new]) add: (Random new next) -> salesBook last.
	^(clientsTransactions at: cartSession clientId ) last key
	! !

!methodRemoval: StoreInterfaceTest #advance30Mins stamp: 'ms 11/6/2022 20:26:54'!
advance30Mins
	timeShift  := Duration minutes: 31!
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 20:28:22' prior: 50560773!
checkOutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| creditCard cashier cartSession |
	
	self assertValidCco: aCco.
	
	cartSession := cartSessions at: aCartId ifAbsent: [ self error: self class invalidCartIdErrorMessage ].
	self assertTimeout: cartSession.
	creditCard := CreditCard expiringOn: aCced withCcn: aCcn andCco: aCco.
	cashier := Cashier toCheckout: cartSession cart charging: creditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook .
	
	cashier checkOut.
	
	(clientsTransactions at: cartSession clientId 
	ifAbsent: [clientsTransactions at: cartSession clientId put: OrderedCollection new]) add: self generateRandomId -> salesBook last.
	^(clientsTransactions at: cartSession clientId ) last key
	! !
!StoreInterface methodsFor: 'assertions' stamp: 'ms 11/6/2022 20:30:57'!
generateRandomId

	^Random new next * 100000000000
	! !
!StoreInterface methodsFor: 'assertions' stamp: 'ms 11/6/2022 20:31:03' prior: 50560831!
generateRandomId

	^Random new next * 100000000000
	! !
!StoreInterface methodsFor: 'assertions' stamp: 'ms 11/6/2022 20:33:04' prior: 50560836!
generateRandomId

	^1000000000000 atRandom.
	! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 20:33:06'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 20:33:06'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 20:33:06'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 20:33:06'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 20:33:06'!
FAILURE!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 20:33:06'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 20:33:06'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 20:33:06'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 20:33:06'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 20:33:06'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 20:33:06'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 20:33:06'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 20:33:06'!
FAILURE!
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/6/2022 20:33:22' prior: 50560756!
test05CheckoutCartReturnsTransactionId

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	

	
	self assert: (interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco) class equals: Integer.
! !

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 20:33:23'!
FAILURE!
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ms 11/6/2022 20:33:30' prior: 50560892!
test05CheckoutCartReturnsTransactionId

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	

	
	self assert: (interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco) class equals: SmallInteger.
! !

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 20:33:30'!
PASSED!

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 20:33:30'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 20:33:30'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 20:33:30'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 20:33:30'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 20:33:30'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 20:33:30'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 20:33:30'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 20:33:30'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 20:33:30'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 20:33:30'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 20:33:30'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 20:33:30'!
PASSED!

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 21:12:35'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 21:12:35'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 21:12:35'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 21:12:35'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 21:12:35'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 21:12:35'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 21:12:35'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 21:12:35'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 21:12:35'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 21:12:35'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 21:12:35'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 21:12:35'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 21:13:44'!
test13ListPurchasesReturnsDictionaryAndTotal

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self advance31Mins.

	self should: [interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface cartLifetimeTimeoutErrorMessage .! !
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 21:14:58'!
test13ListPurchasesReturnsCollectionWithTotal

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self advance31Mins.

	self should: [interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface cartLifetimeTimeoutErrorMessage .! !

!methodRemoval: StoreInterfaceTest #test13ListPurchasesReturnsDictionaryAndTotal stamp: 'ms 11/6/2022 21:15:09'!
test13ListPurchasesReturnsDictionaryAndTotal

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self advance31Mins.

	self should: [interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface cartLifetimeTimeoutErrorMessage .!
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 21:15:13'!
test14ListPurchasesReturnsCollectionWithTotal

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self advance31Mins.

	self should: [interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface cartLifetimeTimeoutErrorMessage .! !

!methodRemoval: StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 21:15:14'!
test13ListPurchasesReturnsCollectionWithTotal

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self advance31Mins.

	self should: [interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface cartLifetimeTimeoutErrorMessage .!
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 21:15:18'!
test13ListPurchasesReturnsCollectionWithTotal

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self advance31Mins.

	self should: [interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface cartLifetimeTimeoutErrorMessage .! !

!methodRemoval: StoreInterfaceTest #test14ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 21:15:19'!
test14ListPurchasesReturnsCollectionWithTotal

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self advance31Mins.

	self should: [interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface cartLifetimeTimeoutErrorMessage .!
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 21:20:12' prior: 50561117!
test13ListPurchasesReturnsCollectionWithTotal

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.
	
	self assert: (OrderedCollection with: (testObjectsFactory itemSellByTheStore -> 4) with: 100) equals: (interface listPurchases: self validClientId)

! !
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 21:20:18' prior: 50561158!
test13ListPurchasesReturnsCollectionWithTotal

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.
	
	self assert: (OrderedCollection with: (testObjectsFactory itemSellByTheStore -> 4) with: 100) 
		equals: (interface listPurchases: self validClientId)

! !

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 21:20:20'!
ERROR!
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 21:20:27'!
listPurchases: aString 
	self shouldBeImplemented.! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 21:21:25' prior: 50561203!
listPurchases: aClientId
	
	! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 21:21:29' prior: 50561208!
listPurchases: aClientId
	
	
	
	! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 21:21:31' prior: 50561212!
listPurchases: aClientId
	

	
	! !

Object subclass: #StoreInterface
	instanceVariableNames: 'merchantProcessor clientAuthenticator carts salesBook catalog cartSessions clockService clientsTransactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'ms 11/6/2022 21:21:41'!
Object subclass: #StoreInterface
	instanceVariableNames: 'merchantProcessor clientAuthenticator carts salesBook catalog cartSessions clockService clientsTransactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 21:22:41' prior: 50561216!
listPurchases: aClientId
	
	(clientsTransactions at: aClientId) inject: 0 into: [ :aSubtotal :aTransaction]
	
	! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 21:27:33' prior: 50561238!
listPurchases: aClientId
	
	(clientsTransactions at: aClientId) inject: 0 into: [ :aSubtotal :aTransaction | aSubtotal + aTransaction total ]
	
	! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 21:27:36' prior: 50561245!
listPurchases: aClientId
	
	^(clientsTransactions at: aClientId) inject: 0 into: [ :aSubtotal :aTransaction | aSubtotal + aTransaction total ]
	
	! !

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 22:44:30'!
ERROR!
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 22:45:45' prior: 50561253!
listPurchases: aClientId
	
	^(clientsTransactions at: aClientId) inject: 0 into: [ :aSubtotal :aTransaction | aSubtotal + aTransaction value total ]
	
	! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 22:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 22:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 22:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 22:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 22:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 22:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 22:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 22:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 22:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 22:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 22:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 22:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 22:45:46'!
FAILURE!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 22:45:46'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 22:47:18' prior: 50560804!
checkOutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| creditCard cashier cartSession |
	
	self assertValidCco: aCco.
	
	cartSession := cartSessions at: aCartId ifAbsent: [ self error: self class invalidCartIdErrorMessage ].
	self assertTimeout: cartSession.
	creditCard := CreditCard expiringOn: aCced withCcn: aCcn andCco: aCco.
	cashier := Cashier toCheckout: cartSession cart charging: creditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook .
	
	cashier checkOut.
	
	(clientsTransactions at: cartSession clientId 
	ifAbsent: [clientsTransactions at: cartSession clientId put: OrderedCollection new]) add:  salesBook last.
	^(clientsTransactions at: cartSession clientId ) last key
	! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 22:47:19' prior: 50561323!
checkOutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| creditCard cashier cartSession |
	
	self assertValidCco: aCco.
	
	cartSession := cartSessions at: aCartId ifAbsent: [ self error: self class invalidCartIdErrorMessage ].
	self assertTimeout: cartSession.
	creditCard := CreditCard expiringOn: aCced withCcn: aCcn andCco: aCco.
	cashier := Cashier toCheckout: cartSession cart charging: creditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook .
	
	cashier checkOut.
	
	(clientsTransactions at: cartSession clientId 
	ifAbsent: [clientsTransactions at: cartSession clientId put: OrderedCollection new]) add: salesBook last.
	^(clientsTransactions at: cartSession clientId ) last key
	! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 22:47:46' prior: 50561349!
checkOutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| creditCard cashier cartSession |
	
	self assertValidCco: aCco.
	
	cartSession := cartSessions at: aCartId ifAbsent: [ self error: self class invalidCartIdErrorMessage ].
	self assertTimeout: cartSession.
	creditCard := CreditCard expiringOn: aCced withCcn: aCcn andCco: aCco.
	cashier := Cashier toCheckout: cartSession cart charging: creditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook .
	
	cashier checkOut.
	
	(clientsTransactions at: cartSession clientId 
	ifAbsent: [clientsTransactions at: cartSession clientId put: OrderedCollection new]) add: self generateRandomId -> salesBook last.
	^(clientsTransactions at: cartSession clientId ) last key
	! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 22:47:47'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 22:47:47'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 22:47:47'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 22:47:47'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 22:47:47'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 22:47:47'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 22:47:47'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 22:47:47'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 22:47:47'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 22:47:47'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 22:47:47'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 22:47:47'!
PASSED!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 22:47:47'!
FAILURE!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 22:47:47'!
FAILURE!
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 22:48:02' prior: 50561179!
test13ListPurchasesReturnsCollectionWithTotal

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.
	
	self assert: (OrderedCollection with: (testObjectsFactory itemSellByTheStore -> 4) with: 40) 
		equals: (interface listPurchases: self validClientId)

! !

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 22:48:03'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 22:48:16' prior: 50561265!
listPurchases: aClientId
	
	
	^(clientsTransactions at: aClientId) inject: 0 into: [ :aSubtotal :aTransaction | aSubtotal + aTransaction value total ]
	
	! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 22:48:24' prior: 50561475!
listPurchases: aClientId
	
	
	^(clientsTransactions at: aClientId) inject: 0 into: [ :aSubtotal :aTransaction | aSubtotal + aTransaction value total ]
	
	! !
!Cashier methodsFor: 'checkout - private' stamp: 'ms 11/6/2022 22:49:14' prior: 50552706!
createSale

	^ Sale of: total with: (cart items)
! !
!Sale class methodsFor: 'instance creation' stamp: 'ms 11/6/2022 22:50:18'!
of: aTotal with: aCollectionOfBooks

	"should assert total is not negative or 0!!"
	^self new initializeToTrace: aTotal with: aCollectionOfBooks ! !

!methodRemoval: Sale class #of: stamp: 'ms 11/6/2022 22:50:22'!
of: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal !
!Sale methodsFor: 'initialization' stamp: 'ms 11/6/2022 22:50:40'!
initializeTotal: aTotal withItems: aCollectionOfItems

	total := aTotal ! !

!classDefinition: #Sale category: 'TusLibros' stamp: 'ms 11/6/2022 22:50:59'!
Object subclass: #Sale
	instanceVariableNames: 'total items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'initialization' stamp: 'ms 11/6/2022 22:50:56' prior: 50561508!
initializeTotal: aTotal withItems: aCollectionOfItems

	total := aTotal. 
	items := aCollectionOfItems! !
!Sale class methodsFor: 'instance creation' stamp: 'ms 11/6/2022 22:51:08' prior: 50561496!
of: aTotal with: aCollectionOfItems

	"should assert total is not negative or 0!!"
	^self new initializeToTrace: aTotal with: aCollectionOfItems ! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 22:51:43' prior: 50561483!
listPurchases: aClientId
	
	self halt.
	^(clientsTransactions at: aClientId) inject: 0 into: [ :aSubtotal :aTransaction | aSubtotal + aTransaction value total ]
	
	! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 22:51:44'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 22:51:44'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 22:51:44'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 22:51:44'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 22:51:44'!
ERROR!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 22:51:44'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 22:51:44'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 22:51:45'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 22:51:45'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 22:51:45'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 22:51:45'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 22:51:45'!
PASSED!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 22:51:45'!
ERROR!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 22:51:49'!
ERROR!
!Sale class methodsFor: 'instance creation' stamp: 'ms 11/6/2022 22:52:08' prior: 50561527!
of: aTotal with: aCollectionOfItems

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal withItems: aCollectionOfItems ! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 22:52:44' prior: 50561535!
listPurchases: aClientId
	

	^(clientsTransactions at: aClientId) inject: 0 into: [ :aSubtotal :aTransaction | aSubtotal + aTransaction value total ]
	
	! !

!methodRemoval: Sale #initializeTotal: stamp: 'ms 11/6/2022 22:53:02'!
initializeTotal: aTotal

	total := aTotal !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 22:53:26' prior: 50561601!
listPurchases: aClientId
	

	^(clientsTransactions at: aClientId) inject: 0 into: [ :aSubtotal :aTransaction | aSubtotal + aTransaction value total ]
	
	! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 22:54:38' prior: 50561613!
listPurchases: aClientId
	
	(clientsTransactions at: aClientId) inject: OrderedCollection new into: [ :aSubtotal :aTransaction | aSubtotal + aTransaction value items ].
	^(clientsTransactions at: aClientId) inject: 0 into: [ :aSubtotal :aTransaction | aSubtotal + aTransaction value total ]
	
	! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 22:54:47' prior: 50561621!
listPurchases: aClientId
	
	| allItems |
	allItems = (clientsTransactions at: aClientId) inject: OrderedCollection new into: [ :aSubtotal :aTransaction | aSubtotal + aTransaction value items ].
	
	^(clientsTransactions at: aClientId) inject: 0 into: [ :aSubtotal :aTransaction | aSubtotal + aTransaction value total ]
	
	! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 22:54:53' prior: 50561634!
listPurchases: aClientId
	
	| allItems |
	
	allItems = (clientsTransactions at: aClientId) inject: OrderedCollection new into: [ :aSubtotal :aTransaction | aSubtotal + aTransaction value items ].
	
	^(clientsTransactions at: aClientId) inject: 0 into: [ :aSubtotal :aTransaction | aSubtotal + aTransaction value total ]
	
	! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 22:55:21' prior: 50561647!
listPurchases: aClientId
	
	| allItems dictionary |
	
	allItems := (clientsTransactions at: aClientId) inject: OrderedCollection new into: [ :aSubtotal :aTransaction | aSubtotal + aTransaction value items ].
	
	dictionary := allItems 
		inject: (Dictionary new)
		into: [ :aDict :item | 
			aDict at: item put: (aDict at: item ifAbsent: [0]) + 1. aDict
		].
	
	^(clientsTransactions at: aClientId) inject: 0 into: [ :aSubtotal :aTransaction | aSubtotal + aTransaction value total ]
	
	! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 22:55:28' prior: 50561660!
listPurchases: aClientId
	
	| allItems dictionary total |
	
	allItems := (clientsTransactions at: aClientId) inject: OrderedCollection new into: [ :aSubtotal :aTransaction | aSubtotal + aTransaction value items ].
	
	dictionary := allItems 
		inject: (Dictionary new)
		into: [ :aDict :item | 
			aDict at: item put: (aDict at: item ifAbsent: [0]) + 1. aDict
		].
	
	^(clientsTransactions at: aClientId) inject: 0 into: [ :aSubtotal :aTransaction | aSubtotal + aTransaction value total ]
	
	! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 22:55:51' prior: 50561679!
listPurchases: aClientId
	
	| allItems dictionary total |
	
	allItems := (clientsTransactions at: aClientId) inject: OrderedCollection new into: [ :aSubtotal :aTransaction | aSubtotal + aTransaction value items ].
	
	dictionary := allItems 
		inject: (Dictionary new)
		into: [ :aDict :item | 
			aDict at: item put: (aDict at: item ifAbsent: [0]) + 1. aDict
		].
	
	total := (clientsTransactions at: aClientId) inject: 0 into: [ :aSubtotal :aTransaction | aSubtotal + aTransaction value total ].
	
	^{allItems, total}
	
	! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 22:55:57' prior: 50561698!
listPurchases: aClientId
	
	| allItems dictionary total |
	
	allItems := (clientsTransactions at: aClientId) inject: OrderedCollection new into: [ :aSubtotal :aTransaction | aSubtotal + aTransaction value items ].
	
	dictionary := allItems 
		inject: (Dictionary new)
		into: [ :aDict :item | 
			aDict at: item put: (aDict at: item ifAbsent: [0]) + 1. aDict
		].
	
	total := (clientsTransactions at: aClientId) inject: 0 into: [ :aSubtotal :aTransaction | aSubtotal + aTransaction value total ].
	
	^{dictionary, total}
	
	! !

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 22:56:05'!
ERROR!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 22:56:05'!
ERROR!
!Sale methodsFor: 'total' stamp: 'ms 11/6/2022 22:56:17'!
items
	
	^ total! !
!Sale methodsFor: 'total' stamp: 'ms 11/6/2022 22:56:19' prior: 50561744!
items
	
	^ items! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 22:56:21'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 22:56:21'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 22:56:21'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 22:56:21'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 22:56:21'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 22:56:21'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 22:56:21'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 22:56:21'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 22:56:21'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 22:56:21'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 22:56:21'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 22:56:21'!
PASSED!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 22:56:21'!
ERROR!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 22:56:21'!
ERROR!
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 22:57:27' prior: 50561718!
listPurchases: aClientId
	
	| allItems dictionary total |
	
	allItems := (clientsTransactions at: aClientId) inject: OrderedCollection new into: [ :aCollection :aTransaction | aCollection withAll: aTransaction value items ].
	
	dictionary := allItems 
		inject: (Dictionary new)
		into: [ :aDict :item | 
			aDict at: item put: (aDict at: item ifAbsent: [0]) + 1. aDict
		].
	
	total := (clientsTransactions at: aClientId) inject: 0 into: [ :aSubtotal :aTransaction | aSubtotal + aTransaction value total ].
	
	^{dictionary, total}
	
	! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 22:57:37'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 22:57:37'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 22:57:37'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 22:57:37'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 22:57:37'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 22:57:37'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 22:57:37'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 22:57:37'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 22:57:37'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 22:57:37'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 22:57:37'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 22:57:37'!
PASSED!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 22:57:37'!
ERROR!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 22:57:37'!
ERROR!
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 22:57:53' prior: 50561800!
listPurchases: aClientId
	
	| allItems dictionary total |
	
	allItems := (clientsTransactions at: aClientId) inject: OrderedCollection new into: [ :aCollection :aTransaction | aCollection addAll: aTransaction value items ].
	
	dictionary := allItems 
		inject: (Dictionary new)
		into: [ :aDict :item | 
			aDict at: item put: (aDict at: item ifAbsent: [0]) + 1. aDict
		].
	
	total := (clientsTransactions at: aClientId) inject: 0 into: [ :aSubtotal :aTransaction | aSubtotal + aTransaction value total ].
	
	^{dictionary, total}
	
	! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 22:57:56' prior: 50561869!
listPurchases: aClientId
	
	| allItems dictionary total |
	
	allItems := (clientsTransactions at: aClientId) inject: OrderedCollection new into: 
	[ :aCollection :aTransaction | aCollection addAll: aTransaction value items ].
	
	dictionary := allItems 
		inject: (Dictionary new)
		into: [ :aDict :item | 
			aDict at: item put: (aDict at: item ifAbsent: [0]) + 1. aDict
		].
	
	total := (clientsTransactions at: aClientId) inject: 0 into: [ :aSubtotal :aTransaction | aSubtotal + aTransaction value total ].
	
	^{dictionary, total}
	
	! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 22:57:57'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 22:57:57'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 22:57:57'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 22:57:57'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 22:57:57'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 22:57:57'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 22:57:57'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 22:57:57'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 22:57:57'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 22:57:57'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 22:57:57'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 22:57:57'!
PASSED!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 22:57:57'!
ERROR!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 22:57:57'!
ERROR!

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 22:58:07'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 22:58:07'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 22:58:07'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 22:58:07'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 22:58:07'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 22:58:07'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 22:58:07'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 22:58:07'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 22:58:07'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 22:58:07'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 22:58:07'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 22:58:07'!
PASSED!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 22:58:07'!
ERROR!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 22:58:07'!
ERROR!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 22:59:14'!
ERROR!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 22:59:14'!
ERROR!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 22:59:36'!
ERROR!
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 22:59:58' prior: 50561889!
listPurchases: aClientId
	
	| allItems dictionary total |
	
	allItems := (clientsTransactions at: aClientId) inject: OrderedCollection new into: 
	[ :aCollection :aTransaction | aCollection addAll: aTransaction value items ].
	
	dictionary := allItems 
		inject: (Dictionary new)
		into: [ :aDict :item | 
			aDict at: item put: (aDict at: item ifAbsent: [0]) + 1. aDict
		].
	
	total := (clientsTransactions at: aClientId) inject: 0 into: [ :aSubtotal :aTransaction | aSubtotal + aTransaction value total ].
	
	^#(dictionary, total)
	
	! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 23:00:09' prior: 50562019!
listPurchases: aClientId
	
	| allItems dictionary total |
	
	allItems := (clientsTransactions at: aClientId) inject: OrderedCollection new into: 
	[ :aCollection :aTransaction | aCollection addAll: aTransaction value items ].
	
	dictionary := allItems 
		inject: (Dictionary new)
		into: [ :aDict :item | 
			aDict at: item put: (aDict at: item ifAbsent: [0]) + 1. aDict
		].
	
	total := (clientsTransactions at: aClientId) inject: 0 into: [ :aSubtotal :aTransaction | aSubtotal + aTransaction value total ].
	
	^#(dictionary, total)
	
	! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 23:00:46' prior: 50562039!
listPurchases: aClientId
	
	| allItems dictionary total |
	
	allItems := (clientsTransactions at: aClientId) inject: OrderedCollection new into: 
	[ :aCollection :aTransaction | aCollection addAll: aTransaction value items ].
	
	dictionary := allItems 
		inject: (Dictionary new)
		into: [ :aDict :item | 
			aDict at: item put: (aDict at: item ifAbsent: [0]) + 1. aDict
		].
	
	total := (clientsTransactions at: aClientId) inject: 0 into: [ :aSubtotal :aTransaction | aSubtotal + aTransaction value total ].
	
	^#(dictionary total)
	
	! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 23:00:52'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 23:00:52'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 23:00:52'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:00:52'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 23:00:52'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 23:00:52'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:00:52'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 23:00:52'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 23:00:52'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:00:52'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:00:52'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:00:52'!
PASSED!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:00:52'!
FAILURE!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:00:52'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 23:01:45' prior: 50562059!
listPurchases: aClientId
	
	| allItems dictionary total |
	
	allItems := (clientsTransactions at: aClientId) inject: OrderedCollection new into: 
	[ :aCollection :aTransaction | aCollection addAll: aTransaction value items ].
	
	dictionary := allItems 
		inject: (Dictionary new)
		into: [ :aDict :item | 
			aDict at: item put: (aDict at: item ifAbsent: [0]) + 1. aDict
		].
	
	total := (clientsTransactions at: aClientId) inject: 0 into: [ :aSubtotal :aTransaction | aSubtotal + aTransaction value total ].
	
	^Array with: dictionary with: total	! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 23:01:46'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 23:01:46'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 23:01:46'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:01:46'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 23:01:46'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 23:01:46'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:01:46'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 23:01:46'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 23:01:46'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:01:46'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:01:46'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:01:46'!
PASSED!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:01:46'!
FAILURE!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:01:46'!
FAILURE!
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:02:05' prior: 50561451!
test13ListPurchasesReturnsCollectionWithTotal

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.
	
	self assert: (Array with: (testObjectsFactory itemSellByTheStore -> 4) with: 40) 
		equals: (interface listPurchases: self validClientId)

! !
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:02:16' prior: 50562199!
test13ListPurchasesReturnsCollectionWithTotal

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.
	
	self assert: (Array with: (Dictionary new add: testObjectsFactory itemSellByTheStore -> 4) with: 40) 
		equals: (interface listPurchases: self validClientId)

! !

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:02:17'!
FAILURE!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:02:36'!
FAILURE!

Array with: (Dictionary new add: testObjectsFactory itemSellByTheStore -> 4) with: 40!

interface listPurchases: self validClientId!
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:03:24' prior: 50562219!
test13ListPurchasesReturnsCollectionWithTotal

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.
	
	self assert: (Array with: (Dictionary new add: testObjectsFactory itemSellByTheStore -> 4; yourself) with: 40) 
		equals: (interface listPurchases: self validClientId)

! !

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:03:25'!
PASSED!

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 23:03:25'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 23:03:25'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 23:03:25'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:03:25'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 23:03:25'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 23:03:25'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:03:25'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 23:03:25'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 23:03:25'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:03:25'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:03:25'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:03:25'!
PASSED!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:03:25'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:04:18'!
test14ListPurchasesWithMultipleSalesReturnsCollectionWithTotal

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.
	
	self assert: (Array with: (Dictionary new add: testObjectsFactory itemSellByTheStore -> 4; yourself) with: 40) 
		equals: (interface listPurchases: self validClientId)

! !
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:04:52' prior: 50562322!
test14ListPurchasesWithMultipleSalesReturnsCollectionWithTotal

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.
	
	self assert: (Array with: (Dictionary new add: testObjectsFactory itemSellByTheStore -> 4; yourself) with: 40) 
		equals: (interface listPurchases: self validClientId)

! !

!testRun: #StoreInterfaceTest #test14ListPurchasesWithMultipleSalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:04:57'!
FAILURE!
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:05:06' prior: 50562344!
test14ListPurchasesWithMultipleSalesReturnsCollectionWithTotal

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.
	
	self assert: (Array with: (Dictionary new add: testObjectsFactory itemSellByTheStore -> 4; yourself) with: 40) 
		equals: (interface listPurchases: self validClientId)

! !
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:05:15' prior: 50562373!
test14ListPurchasesWithMultipleSalesReturnsCollectionWithTotal

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.
		
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.
	
	self assert: (Array with: (Dictionary new add: testObjectsFactory itemSellByTheStore -> 4; yourself) with: 40) 
		equals: (interface listPurchases: self validClientId)

! !

!testRun: #StoreInterfaceTest #test14ListPurchasesWithMultipleSalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:05:21'!
FAILURE!
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:05:55' prior: 50562395!
test14ListPurchasesWithMultipleSalesReturnsCollectionWithTotal

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.
		
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.
	
	self assert: (Array with: (Dictionary new add: testObjectsFactory itemSellByTheStore -> 8; yourself) with: 80) 
		equals: (interface listPurchases: self validClientId)

! !

!testRun: #StoreInterfaceTest #test14ListPurchasesWithMultipleSalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:06:06'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 23:06:50' prior: 50562129!
listPurchases: aClientId
	
	| allItems dictionary total |
	
	allItems := (clientsTransactions at: aClientId) inject: OrderedCollection new into: 
	[ :aCollection :aTransaction | aCollection addAll: aTransaction value items ].
	self halt.
	dictionary := allItems 
		inject: (Dictionary new)
		into: [ :aDict :item | 
			aDict at: item put: (aDict at: item ifAbsent: [0]) + 1. aDict
		].
	
	total := (clientsTransactions at: aClientId) inject: 0 into: [ :aSubtotal :aTransaction | aSubtotal + aTransaction value total ].
	
	^Array with: dictionary with: total	! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 23:08:24' prior: 50562469!
listPurchases: aClientId
	
	| allItems dictionary total |
	
	allItems := (clientsTransactions at: aClientId) inject: OrderedCollection new into: 
	[ :aCollection :aTransaction | aCollection addAll: aTransaction value items. aCollection ].
	self halt.
	dictionary := allItems 
		inject: (Dictionary new)
		into: [ :aDict :item | 
			aDict at: item put: (aDict at: item ifAbsent: [0]) + 1. aDict
		].
	
	total := (clientsTransactions at: aClientId) inject: 0 into: [ :aSubtotal :aTransaction | aSubtotal + aTransaction value total ].
	
	^Array with: dictionary with: total	! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 23:08:26'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 23:08:26'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 23:08:26'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:08:26'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 23:08:26'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 23:08:26'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:08:26'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 23:08:26'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 23:08:26'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:08:26'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:08:26'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:08:26'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 23:08:32' prior: 50562490!
listPurchases: aClientId
	
	| allItems dictionary total |
	
	allItems := (clientsTransactions at: aClientId) inject: OrderedCollection new into: 
	[ :aCollection :aTransaction | aCollection addAll: aTransaction value items. aCollection ].

	dictionary := allItems 
		inject: (Dictionary new)
		into: [ :aDict :item | 
			aDict at: item put: (aDict at: item ifAbsent: [0]) + 1. aDict
		].
	
	total := (clientsTransactions at: aClientId) inject: 0 into: [ :aSubtotal :aTransaction | aSubtotal + aTransaction value total ].
	
	^Array with: dictionary with: total	! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 23:08:33'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 23:08:33'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 23:08:33'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:08:33'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 23:08:33'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 23:08:33'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:08:33'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 23:08:33'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 23:08:33'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:08:33'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:08:33'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:08:33'!
PASSED!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:08:33'!
PASSED!

!testRun: #StoreInterfaceTest #test14ListPurchasesWithMultipleSalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:08:33'!
PASSED!

!testRun: #StoreInterfaceTest #test14ListPurchasesWithMultipleSalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:10:08'!
PASSED!

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 23:10:08'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 23:10:09'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 23:10:09'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:10:09'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 23:10:09'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 23:10:09'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:10:09'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 23:10:09'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 23:10:09'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:10:09'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:10:09'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:10:09'!
PASSED!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:10:09'!
PASSED!

!testRun: #StoreInterfaceTest #test14ListPurchasesWithMultipleSalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:10:09'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:10:21'!
test14ListPurchasesWithEmptySalesReturnsCollectionWithTotal

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.
		
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.
	
	self assert: (Array with: (Dictionary new add: testObjectsFactory itemSellByTheStore -> 8; yourself) with: 80) 
		equals: (interface listPurchases: self validClientId)

! !
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:10:38' prior: 50562677!
test14ListPurchasesWithEmptySalesReturnsCollectionWithTotal

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	
	self assert: (Array with: (Dictionary new add: testObjectsFactory itemSellByTheStore -> 8; yourself) with: 80) 
		equals: (interface listPurchases: self validClientId)

! !
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:10:45' prior: 50562710!
test14ListPurchasesWithEmptySalesReturnsCollectionWithTotal

	
	
	self assert: (Array with: (Dictionary new add: testObjectsFactory itemSellByTheStore -> 8; yourself) with: 80) 
		equals: (interface listPurchases: self validClientId)

! !
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:10:49' prior: 50562724!
test14ListPurchasesWithEmptySalesReturnsCollectionWithTotal

	self assert: (Array with: (Dictionary new add: testObjectsFactory itemSellByTheStore -> 8; yourself) with: 80) 
		equals: (interface listPurchases: self validClientId)

! !

!testRun: #StoreInterfaceTest #test14ListPurchasesWithEmptySalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:10:50'!
ERROR!
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:11:13'!
test15ListPurchasesWithEmptySalesReturnsCollectionWithTotal

	self assert: (Array with: (Dictionary new add: testObjectsFactory itemSellByTheStore -> 8; yourself) with: 80) 
		equals: (interface listPurchases: self validClientId)

! !

!methodRemoval: StoreInterfaceTest #test14ListPurchasesWithEmptySalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:11:13'!
test14ListPurchasesWithEmptySalesReturnsCollectionWithTotal

	self assert: (Array with: (Dictionary new add: testObjectsFactory itemSellByTheStore -> 8; yourself) with: 80) 
		equals: (interface listPurchases: self validClientId)

!
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 23:12:22' prior: 50562553!
listPurchases: aClientId
	
	| allItems dictionary total |
	
	allItems := (clientsTransactions at: aClientId ifAbsent: [OrderedCollection new]) inject: OrderedCollection new into: 
	[ :aCollection :aTransaction | aCollection addAll: aTransaction value items. aCollection ].

	dictionary := allItems 
		inject: (Dictionary new)
		into: [ :aDict :item | 
			aDict at: item put: (aDict at: item ifAbsent: [0]) + 1. aDict
		].
	
	total := (clientsTransactions at: aClientId) inject: 0 into: [ :aSubtotal :aTransaction | aSubtotal + aTransaction value total ].
	
	^Array with: dictionary with: total	! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 23:12:24'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 23:12:24'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 23:12:24'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:12:24'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 23:12:24'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 23:12:24'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:12:24'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 23:12:24'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 23:12:24'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:12:24'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:12:24'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:12:24'!
PASSED!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:12:24'!
PASSED!

!testRun: #StoreInterfaceTest #test14ListPurchasesWithMultipleSalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:12:24'!
PASSED!

!testRun: #StoreInterfaceTest #test15ListPurchasesWithEmptySalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:12:24'!
ERROR!

!testRun: #StoreInterfaceTest #test15ListPurchasesWithEmptySalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:12:24'!
ERROR!
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 23:12:45' prior: 50562771!
listPurchases: aClientId
	
	| allItems dictionary total |
	
	allItems := (clientsTransactions at: aClientId ifAbsent: [OrderedCollection new]) inject: OrderedCollection new into: 
	[ :aCollection :aTransaction | aCollection addAll: aTransaction value items. aCollection ].

	dictionary := allItems 
		inject: (Dictionary new)
		into: [ :aDict :item | 
			aDict at: item put: (aDict at: item ifAbsent: [0]) + 1. aDict
		].
	
	total := (clientsTransactions at: aClientId ifAbsent: [OrderedCollection new]) inject: 0 into: [ :aSubtotal :aTransaction | aSubtotal + aTransaction value total ].
	
	^Array with: dictionary with: total	! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 23:12:46'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 23:12:46'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 23:12:46'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:12:46'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 23:12:46'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 23:12:46'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:12:46'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 23:12:46'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 23:12:46'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:12:46'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:12:46'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:12:46'!
PASSED!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:12:46'!
PASSED!

!testRun: #StoreInterfaceTest #test14ListPurchasesWithMultipleSalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:12:46'!
PASSED!

!testRun: #StoreInterfaceTest #test15ListPurchasesWithEmptySalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:12:46'!
FAILURE!

!testRun: #StoreInterfaceTest #test15ListPurchasesWithEmptySalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:12:46'!
FAILURE!
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:13:03' prior: 50562749!
test15ListPurchasesWithEmptySalesReturnsCollectionWithTotal

	self assert: (Array with: (Dictionary new; yourself) with: 80) 
		equals: (interface listPurchases: self validClientId)

! !
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:13:04' prior: 50562932!
test15ListPurchasesWithEmptySalesReturnsCollectionWithTotal

	self assert: (Array with: (Dictionary new; yourself) with: 0) 
		equals: (interface listPurchases: self validClientId)

! !

!testRun: #StoreInterfaceTest #test15ListPurchasesWithEmptySalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:13:05'!
FAILURE!
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:13:17' prior: 50562941!
test15ListPurchasesWithEmptySalesReturnsCollectionWithTotal

	self assert: (Array with: Dictionary with: 0) 
		equals: (interface listPurchases: self validClientId)

! !
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:13:19' prior: 50562954!
test15ListPurchasesWithEmptySalesReturnsCollectionWithTotal

	self assert: (Array with: Dictionary new with: 0) 
		equals: (interface listPurchases: self validClientId)

! !

!testRun: #StoreInterfaceTest #test15ListPurchasesWithEmptySalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:13:20'!
PASSED!

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 23:13:20'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 23:13:20'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 23:13:20'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:13:20'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 23:13:20'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 23:13:20'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:13:20'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 23:13:20'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 23:13:20'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:13:20'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:13:20'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:13:20'!
PASSED!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:13:20'!
PASSED!

!testRun: #StoreInterfaceTest #test14ListPurchasesWithMultipleSalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:13:20'!
PASSED!

!testRun: #StoreInterfaceTest #test15ListPurchasesWithEmptySalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:13:20'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:14:34'!
test15ListPurchasesWithInvalidClientIdReturnsEmptyResponse

	self assert: (Array with: Dictionary new with: 0) 
		equals: (interface listPurchases: self validClientId)

! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 23:15:10' prior: 50562851!
listPurchases: aClientId 
	
	| allItems dictionary total |
	
	allItems := (clientsTransactions at: aClientId ifAbsent: [OrderedCollection new]) inject: OrderedCollection new into: 
	[ :aCollection :aTransaction | aCollection addAll: aTransaction value items. aCollection ].

	dictionary := allItems 
		inject: (Dictionary new)
		into: [ :aDict :item | 
			aDict at: item put: (aDict at: item ifAbsent: [0]) + 1. aDict
		].
	
	total := (clientsTransactions at: aClientId ifAbsent: [OrderedCollection new]) inject: 0 into: [ :aSubtotal :aTransaction | aSubtotal + aTransaction value total ].
	
	^Array with: dictionary with: total	! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 23:15:31'!
listPurchasesWithId: aClientId andPassword: aPassword
	
	| allItems dictionary total |
	
	allItems := (clientsTransactions at: aClientId ifAbsent: [OrderedCollection new]) inject: OrderedCollection new into: 
	[ :aCollection :aTransaction | aCollection addAll: aTransaction value items. aCollection ].

	dictionary := allItems 
		inject: (Dictionary new)
		into: [ :aDict :item | 
			aDict at: item put: (aDict at: item ifAbsent: [0]) + 1. aDict
		].
	
	total := (clientsTransactions at: aClientId ifAbsent: [OrderedCollection new]) inject: 0 into: [ :aSubtotal :aTransaction | aSubtotal + aTransaction value total ].
	
	^Array with: dictionary with: total	! !

!methodRemoval: StoreInterface #listPurchases: stamp: 'ms 11/6/2022 23:15:35'!
listPurchases: aClientId 
	
	| allItems dictionary total |
	
	allItems := (clientsTransactions at: aClientId ifAbsent: [OrderedCollection new]) inject: OrderedCollection new into: 
	[ :aCollection :aTransaction | aCollection addAll: aTransaction value items. aCollection ].

	dictionary := allItems 
		inject: (Dictionary new)
		into: [ :aDict :item | 
			aDict at: item put: (aDict at: item ifAbsent: [0]) + 1. aDict
		].
	
	total := (clientsTransactions at: aClientId ifAbsent: [OrderedCollection new]) inject: 0 into: [ :aSubtotal :aTransaction | aSubtotal + aTransaction value total ].
	
	^Array with: dictionary with: total	!
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:16:02' prior: 50562252!
test13ListPurchasesReturnsCollectionWithTotal

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.
	
	self assert: (Array with: (Dictionary new add: testObjectsFactory itemSellByTheStore -> 4; yourself) with: 40) 
		equals: (interface listPurchasesWithId: self validClientId andPassword: self validClientPassword )

! !
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:16:08' prior: 50562432!
test14ListPurchasesWithMultipleSalesReturnsCollectionWithTotal

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.
		
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.
	
	self assert: (Array with: (Dictionary new add: testObjectsFactory itemSellByTheStore -> 8; yourself) with: 80) 
		equals: (interface listPurchasesWithId: self validClientId andPassword: self validClientPassword )

! !
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:16:11' prior: 50562963!
test15ListPurchasesWithEmptySalesReturnsCollectionWithTotal

	self assert: (Array with: Dictionary new with: 0) 
		equals: (interface listPurchasesWithId: self validClientId andPassword: self validClientPassword )

! !
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:16:14' prior: 50563029!
test15ListPurchasesWithInvalidClientIdReturnsEmptyResponse

	self assert: (Array with: Dictionary new with: 0) 
		equals: (interface listPurchasesWithId: self validClientId andPassword: self validClientPassword )

! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 23:16:25' prior: 50563061!
listPurchasesWithId: aClientId andPassword: aPassword
	
	| allItems dictionary total |
	
		self assertCorrectClientId: aClientId andPassword: aPassword.

	
	allItems := (clientsTransactions at: aClientId ifAbsent: [OrderedCollection new]) inject: OrderedCollection new into: 
	[ :aCollection :aTransaction | aCollection addAll: aTransaction value items. aCollection ].

	dictionary := allItems 
		inject: (Dictionary new)
		into: [ :aDict :item | 
			aDict at: item put: (aDict at: item ifAbsent: [0]) + 1. aDict
		].
	
	total := (clientsTransactions at: aClientId ifAbsent: [OrderedCollection new]) inject: 0 into: [ :aSubtotal :aTransaction | aSubtotal + aTransaction value total ].
	
	^Array with: dictionary with: total	! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 23:16:29' prior: 50563184!
listPurchasesWithId: aClientId andPassword: aPassword
	
	| allItems dictionary total |
	
	self assertCorrectClientId: aClientId andPassword: aPassword.
	
	allItems := (clientsTransactions at: aClientId ifAbsent: [OrderedCollection new]) inject: OrderedCollection new into: 
	[ :aCollection :aTransaction | aCollection addAll: aTransaction value items. aCollection ].

	dictionary := allItems 
		inject: (Dictionary new)
		into: [ :aDict :item | 
			aDict at: item put: (aDict at: item ifAbsent: [0]) + 1. aDict
		].
	
	total := (clientsTransactions at: aClientId ifAbsent: [OrderedCollection new]) inject: 0 into: [ :aSubtotal :aTransaction | aSubtotal + aTransaction value total ].
	
	^Array with: dictionary with: total	! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 23:16:32'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 23:16:32'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 23:16:33'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:16:33'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 23:16:33'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 23:16:33'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:16:33'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 23:16:33'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 23:16:33'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:16:33'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:16:33'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:16:33'!
PASSED!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:16:33'!
PASSED!

!testRun: #StoreInterfaceTest #test14ListPurchasesWithMultipleSalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:16:33'!
PASSED!

!testRun: #StoreInterfaceTest #test15ListPurchasesWithEmptySalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:16:33'!
PASSED!

!testRun: #StoreInterfaceTest #test15ListPurchasesWithInvalidClientIdReturnsEmptyResponse stamp: 'ms 11/6/2022 23:16:33'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:16:59'!
test15ListPurchasesWithInvalidClientIdAndPasswordReturnsError

	self assert: (Array with: Dictionary new with: 0) 
		equals: (interface listPurchasesWithId: self validClientId andPassword: self validClientPassword )

! !

!methodRemoval: StoreInterfaceTest #test15ListPurchasesWithInvalidClientIdAndPasswordReturnsError stamp: 'ms 11/6/2022 23:17:14'!
test15ListPurchasesWithInvalidClientIdAndPasswordReturnsError

	self assert: (Array with: Dictionary new with: 0) 
		equals: (interface listPurchasesWithId: self validClientId andPassword: self validClientPassword )

!
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:17:23'!
test16ListPurchasesWithInvalidClientIdReturnsEmptyResponse

	self assert: (Array with: Dictionary new with: 0) 
		equals: (interface listPurchasesWithId: self validClientId andPassword: self validClientPassword )

! !

!methodRemoval: StoreInterfaceTest #test15ListPurchasesWithInvalidClientIdReturnsEmptyResponse stamp: 'ms 11/6/2022 23:17:24'!
test15ListPurchasesWithInvalidClientIdReturnsEmptyResponse

	self assert: (Array with: Dictionary new with: 0) 
		equals: (interface listPurchasesWithId: self validClientId andPassword: self validClientPassword )

!
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:17:53' prior: 50563315!
test16ListPurchasesWithInvalidClientIdReturnsEmptyResponse

	self should: [interface listPurchasesWithId: self invalidClientId andPassword: self invalidClientPassword.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface incorrectAuthenticationErrorMessage.

! !

!testRun: #StoreInterfaceTest #test16ListPurchasesWithInvalidClientIdReturnsEmptyResponse stamp: 'ms 11/6/2022 23:17:55'!
PASSED!

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 23:17:55'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 23:17:55'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 23:17:55'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:17:55'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 23:17:55'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 23:17:55'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:17:55'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 23:17:55'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 23:17:55'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:17:55'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:17:55'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:17:55'!
PASSED!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:17:55'!
PASSED!

!testRun: #StoreInterfaceTest #test14ListPurchasesWithMultipleSalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:17:55'!
PASSED!

!testRun: #StoreInterfaceTest #test15ListPurchasesWithEmptySalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:17:55'!
PASSED!

!testRun: #StoreInterfaceTest #test16ListPurchasesWithInvalidClientIdReturnsEmptyResponse stamp: 'ms 11/6/2022 23:17:55'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:19:06'!
test17CheckoutEmptyCartReturnsError

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	

	
	self assert: (interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco) class equals: SmallInteger.
! !
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:19:10' prior: 50563410!
test17CheckoutEmptyCartReturnsError

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	
	self assert: (interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco) class equals: SmallInteger.
! !

!testRun: #StoreInterfaceTest #test17CheckoutEmptyCartReturnsError stamp: 'ms 11/6/2022 23:19:10'!
ERROR!
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:19:39' prior: 50563427!
test17CheckoutEmptyCartReturnsError

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	
	self should: [interface checkOutCart: testObjectsFactory invalidCartId
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface invalidCartIdErrorMessage.
! !
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:19:48' prior: 50563445!
test17CheckoutEmptyCartReturnsError

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	
	self should: [interface checkOutCart: cartId		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface invalidCartIdErrorMessage.
! !

!testRun: #StoreInterfaceTest #test17CheckoutEmptyCartReturnsError stamp: 'ms 11/6/2022 23:19:49'!
FAILURE!
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:20:31' prior: 50563462!
test17CheckoutEmptyCartReturnsError

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	
	self should: [interface checkOutCart: cartId		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.] raise: Error - MessageNotUnderstood withMessageText: Cashier can
! !

!testRun: #StoreInterfaceTest #test17CheckoutEmptyCartReturnsError stamp: 'ms 11/6/2022 23:20:31'!
ERROR!
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:20:59' prior: 50563482!
test17CheckoutEmptyCartReturnsError

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	
	self should: [interface checkOutCart: cartId		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.] raise: Error - MessageNotUnderstood withMessageText: Cashier cartCanNotBeEmptyErrorMessage
! !

!testRun: #StoreInterfaceTest #test17CheckoutEmptyCartReturnsError stamp: 'ms 11/6/2022 23:20:59'!
PASSED!

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 23:21:00'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 23:21:00'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 23:21:00'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:21:00'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 23:21:00'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 23:21:00'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:21:00'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 23:21:00'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 23:21:00'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:21:00'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:21:00'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:21:00'!
PASSED!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:21:00'!
PASSED!

!testRun: #StoreInterfaceTest #test14ListPurchasesWithMultipleSalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:21:00'!
PASSED!

!testRun: #StoreInterfaceTest #test15ListPurchasesWithEmptySalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:21:00'!
PASSED!

!testRun: #StoreInterfaceTest #test16ListPurchasesWithInvalidClientIdReturnsEmptyResponse stamp: 'ms 11/6/2022 23:21:00'!
PASSED!

!testRun: #StoreInterfaceTest #test17CheckoutEmptyCartReturnsError stamp: 'ms 11/6/2022 23:21:00'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:21:24' prior: 50560913!
test05CheckoutCartReturnsTransactionId

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self assert: (interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco) class equals: SmallInteger.
! !

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 23:21:25'!
PASSED!

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 23:21:25'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 23:21:25'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 23:21:25'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:21:25'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 23:21:25'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 23:21:25'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:21:25'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 23:21:25'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 23:21:25'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:21:25'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:21:25'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:21:25'!
PASSED!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:21:25'!
PASSED!

!testRun: #StoreInterfaceTest #test14ListPurchasesWithMultipleSalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:21:25'!
PASSED!

!testRun: #StoreInterfaceTest #test15ListPurchasesWithEmptySalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:21:25'!
PASSED!

!testRun: #StoreInterfaceTest #test16ListPurchasesWithInvalidClientIdReturnsEmptyResponse stamp: 'ms 11/6/2022 23:21:25'!
PASSED!

!testRun: #StoreInterfaceTest #test17CheckoutEmptyCartReturnsError stamp: 'ms 11/6/2022 23:21:25'!
PASSED!

!methodRemoval: StoreInterfaceTest #test05CheckoutCartReturnsTransactionId stamp: 'ms 11/6/2022 23:22:13'!
test05CheckoutCartReturnsTransactionId

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self assert: (interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco) class equals: SmallInteger.
!
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:22:24'!
test05CheckoutEmptyCartReturnsError

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	
	self should: [interface checkOutCart: cartId		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.] raise: Error - MessageNotUnderstood withMessageText: Cashier cartCanNotBeEmptyErrorMessage
! !

!methodRemoval: StoreInterfaceTest #test17CheckoutEmptyCartReturnsError stamp: 'ms 11/6/2022 23:22:27'!
test17CheckoutEmptyCartReturnsError

	| cartId |
	
	cartId := interface createCartWithId: self validClientId andPassword: self validClientPassword.
	
	self should: [interface checkOutCart: cartId		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.] raise: Error - MessageNotUnderstood withMessageText: Cashier cartCanNotBeEmptyErrorMessage
!
!CartSession methodsFor: 'initialization' stamp: 'ms 11/6/2022 23:26:18' prior: 50560327!
initializeWithCart: aCart at: aTimestamp forClient: aClientId
	id := self generateRandomId.
	cart := aCart.
	createdAt := aTimestamp.
	clientId :=aClientId! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 23:26:23'!
ERROR!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 23:26:23'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 23:26:23'!
ERROR!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:26:23'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutEmptyCartReturnsError stamp: 'ms 11/6/2022 23:26:23'!
ERROR!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 23:26:23'!
ERROR!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:26:23'!
ERROR!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 23:26:23'!
ERROR!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 23:26:23'!
ERROR!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:26:23'!
ERROR!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:26:23'!
ERROR!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:26:23'!
ERROR!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:26:23'!
ERROR!

!testRun: #StoreInterfaceTest #test14ListPurchasesWithMultipleSalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:26:23'!
ERROR!

!testRun: #StoreInterfaceTest #test15ListPurchasesWithEmptySalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:26:23'!
PASSED!

!testRun: #StoreInterfaceTest #test16ListPurchasesWithInvalidClientIdReturnsEmptyResponse stamp: 'ms 11/6/2022 23:26:23'!
PASSED!

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 23:26:25'!
ERROR!
!CartSession methodsFor: 'private' stamp: 'ms 11/6/2022 23:26:42'!
generateRandomId
	self shouldBeImplemented.! !
!CartSession methodsFor: 'private' stamp: 'ms 11/6/2022 23:26:52' prior: 50563782!
generateRandomId
	
	^100000000 atRandom.! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 23:26:59'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 23:26:59'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 23:26:59'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:26:59'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutEmptyCartReturnsError stamp: 'ms 11/6/2022 23:26:59'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 23:26:59'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:26:59'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 23:26:59'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 23:26:59'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:26:59'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:26:59'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:26:59'!
PASSED!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:26:59'!
PASSED!

!testRun: #StoreInterfaceTest #test14ListPurchasesWithMultipleSalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:26:59'!
PASSED!

!testRun: #StoreInterfaceTest #test15ListPurchasesWithEmptySalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:26:59'!
PASSED!

!testRun: #StoreInterfaceTest #test16ListPurchasesWithInvalidClientIdReturnsEmptyResponse stamp: 'ms 11/6/2022 23:26:59'!
PASSED!

!methodRemoval: StoreInterfaceTest #validClientId stamp: 'ms 11/6/2022 23:27:19'!
validClientId
	^'catramado'!

!methodRemoval: StoreInterfaceTest #validClientPassword stamp: 'ms 11/6/2022 23:27:21'!
validClientPassword
	
	^'culiiiii'!

!methodRemoval: StoreInterfaceTest #invalidClientId stamp: 'ms 11/6/2022 23:27:24'!
invalidClientId
	^'cuca'!

!methodRemoval: StoreInterfaceTest #invalidClientPassword stamp: 'ms 11/6/2022 23:27:27'!
invalidClientPassword
	^'monga'.!
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:27:37' prior: 50552535!
test01ValidIdAndPasswordCreatesCartSuccessfully

	| cartId |
	cartId := interface createCartWithId: testObjectsFactory validClientId andPassword: testObjectsFactory validClientPassword.
	self assert: (interface listCart: cartId) isEmpty! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 23:27:38'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'user' stamp: 'ms 11/6/2022 23:27:48'!
validClientId
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'user' stamp: 'ms 11/6/2022 23:28:03' prior: 50563878!
validClientId
	
	^'catramado'! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 23:28:05'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'ms 11/6/2022 23:28:13'!
validClientPassword
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'ms 11/6/2022 23:28:25' prior: 50563891!
validClientPassword
 ^'boquita19'! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'ms 11/6/2022 23:28:28' prior: 50563896!
validClientPassword

 	^'boquita19'! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 23:28:30'!
ERROR!

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 23:28:40'!
ERROR!
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:29:13' prior: 50563336!
test16ListPurchasesWithInvalidClientIdReturnsEmptyResponse

	self should: [interface listPurchasesWithId: testObjectsFactory invalidClientId andPassword: testObjectsFactory invalidClientPassword.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface incorrectAuthenticationErrorMessage.

! !

!testRun: #StoreInterfaceTest #test16ListPurchasesWithInvalidClientIdReturnsEmptyResponse stamp: 'ms 11/6/2022 23:29:45'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'user' stamp: 'ms 11/6/2022 23:29:52'!
invalidClientId
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'user' stamp: 'ms 11/6/2022 23:30:02' prior: 50563930!
invalidClientId
	^'contramado'.! !

!testRun: #StoreInterfaceTest #test16ListPurchasesWithInvalidClientIdReturnsEmptyResponse stamp: 'ms 11/6/2022 23:30:05'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'user' stamp: 'ms 11/6/2022 23:30:10'!
invalidClientPassword
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'user' stamp: 'ms 11/6/2022 23:30:17' prior: 50563943!
invalidClientPassword
	^'lopedevega'! !

!testRun: #StoreInterfaceTest #test16ListPurchasesWithInvalidClientIdReturnsEmptyResponse stamp: 'ms 11/6/2022 23:30:20'!
ERROR!
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:30:36' prior: 50563164!
test15ListPurchasesWithEmptySalesReturnsCollectionWithTotal

	self assert: (Array with: Dictionary new with: 0) 
		equals: (interface listPurchasesWithId: testObjectsFactory validClientId andPassword: testObjectsFactory validClientPassword )

! !
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:30:50' prior: 50563130!
test14ListPurchasesWithMultipleSalesReturnsCollectionWithTotal

	| cartId |
	
	cartId := interface createCartWithId: testObjectsFactory validClientId andPassword: testObjectsFactory validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.
		
	cartId := interface createCartWithId: testObjectsFactory validClientId andPassword: testObjectsFactory validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.
	
	self assert: (Array with: (Dictionary new add: testObjectsFactory itemSellByTheStore -> 8; yourself) with: 80) 
		equals: (interface listPurchasesWithId: testObjectsFactory validClientId andPassword: testObjectsFactory validClientPassword )

! !
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:30:57' prior: 50563107!
test13ListPurchasesReturnsCollectionWithTotal

	| cartId |
	
	cartId := interface createCartWithId: testObjectsFactory validClientId andPassword: testObjectsFactory validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.
	
	self assert: (Array with: (Dictionary new add: testObjectsFactory itemSellByTheStore -> 4; yourself) with: 40) 
		equals: (interface listPurchasesWithId: testObjectsFactory validClientId andPassword: testObjectsFactory validClientPassword )

! !
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:31:02' prior: 50560220!
test12CheckoutCartInvalidAfter31Minutes

	| cartId |
	
	cartId := interface createCartWithId: testObjectsFactory validClientId andPassword: testObjectsFactory validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self advance31Mins.

	self should: [interface checkOutCart: cartId 
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface cartLifetimeTimeoutErrorMessage .! !
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:31:06' prior: 50560057!
test11ListCartInvalidAfter31Minutes

	| cartId |
	
	cartId := interface createCartWithId: testObjectsFactory validClientId andPassword: testObjectsFactory validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self advance31Mins.

	self should: [interface listCart: cartId.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface cartLifetimeTimeoutErrorMessage .! !
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:31:09' prior: 50560122!
test10AddToCartInvalidAfter31Minutes

	| cartId |
	
	cartId := interface createCartWithId: testObjectsFactory validClientId andPassword: testObjectsFactory validClientPassword.
	
	
	self advance31Mins.

	self should: [interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface cartLifetimeTimeoutErrorMessage .! !
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:31:12' prior: 50558757!
test09CheckoutWithInvalidCcoThrowsError

	| cartId |
	
	cartId := interface createCartWithId: testObjectsFactory validClientId andPassword: testObjectsFactory validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
		debitBehavior := [ :anAmount :aCreditCard | ].
	
	self should: [interface checkOutCart: cartId
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory invalidCco.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface invalidCardCcoToLongErrorMessage .! !
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:31:16' prior: 50558486!
test08CheckoutWithInvalidCcedThrowsError

	| cartId |
	
	cartId := interface createCartWithId: testObjectsFactory validClientId andPassword: testObjectsFactory validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	debitBehavior := [ :anAmount :aCreditCard | ].
	
	self should: [interface checkOutCart: cartId
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory invalidCced 
		withCco: testObjectsFactory validCco.] raise: Error - MessageNotUnderstood withMessageText: Cashier canNotChargeAnExpiredCreditCardErrorMessage.! !
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:31:28' prior: 50557534!
test07CheckoutWithInvalidCartIdThrowsError

	| cartId |
	
	cartId := interface createCartWithId: testObjectsFactory validClientId andPassword: testObjectsFactory validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
		debitBehavior := [ :anAmount :aCreditCard | ].
	
	self should: [interface checkOutCart: testObjectsFactory invalidCartId
		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface invalidCartIdErrorMessage.! !
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:31:32' prior: 50557083!
test06CheckoutWithInvalidCcnThrowsError

	| cartId |
	
	cartId := interface createCartWithId: testObjectsFactory validClientId andPassword: testObjectsFactory validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self should: [interface checkOutCart: cartId 
		withCcn: testObjectsFactory invalidCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface invalidCcnErrorMessage.! !
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:31:35' prior: 50563681!
test05CheckoutEmptyCartReturnsError

	| cartId |
	
	cartId := interface createCartWithId: testObjectsFactory validClientId andPassword: testObjectsFactory validClientPassword.
	
	self should: [interface checkOutCart: cartId		withCcn: testObjectsFactory validCcn 
		withCced: testObjectsFactory validCced 
		withCco: testObjectsFactory validCco.] raise: Error - MessageNotUnderstood withMessageText: Cashier cartCanNotBeEmptyErrorMessage
! !
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:31:42' prior: 50556077!
test03AddToCartAddsItemSuccesfully

	| cartId |
	
	cartId := interface createCartWithId: testObjectsFactory validClientId andPassword: testObjectsFactory validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self assert: (interface listCart: cartId) equals: (Dictionary new add: testObjectsFactory itemSellByTheStore -> 4; yourself).! !
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:31:46' prior: 50552545!
test02InvalidIdAndPasswordThrowsError

	self should: [interface createCartWithId: testObjectsFactory invalidClientId andPassword: testObjectsFactory invalidClientPassword.] raise: Error - MessageNotUnderstood withMessageText: StoreInterface incorrectAuthenticationErrorMessage.! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 23:31:48'!
ERROR!

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 23:31:48'!
ERROR!

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 23:32:02'!
ERROR!
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:32:08' prior: 50563864!
test01ValidIdAndPasswordCreatesCartSuccessfully

	| cartId |
	cartId := interface createCartWithId: testObjectsFactory validClientId andPassword: testObjectsFactory validClientPassword.
	self assert: (interface listCart: cartId) isEmpty! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 23:32:09'!
ERROR!
!StoreInterfaceTest methodsFor: 'support' stamp: 'ms 11/6/2022 23:32:55' prior: 50552579!
authenticateClientId: aClientId andPassword: aPassword 
	^aClientId = testObjectsFactory validClientId  and: [aPassword = testObjectsFactory validClientPassword ]! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 23:32:55'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 23:32:55'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 23:32:55'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:32:55'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutEmptyCartReturnsError stamp: 'ms 11/6/2022 23:32:55'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 23:32:55'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:32:55'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 23:32:55'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 23:32:55'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:32:55'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:32:55'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:32:55'!
PASSED!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:32:55'!
PASSED!

!testRun: #StoreInterfaceTest #test14ListPurchasesWithMultipleSalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:32:55'!
PASSED!

!testRun: #StoreInterfaceTest #test15ListPurchasesWithEmptySalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:32:55'!
PASSED!

!testRun: #StoreInterfaceTest #test16ListPurchasesWithInvalidClientIdReturnsEmptyResponse stamp: 'ms 11/6/2022 23:32:55'!
PASSED!

----End fileIn of /Users/msaied/Documents/UBA/inge1/2022-2c/07-Portfolio2/Solucion/Portfolio2-Solucion.st----!
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 23:39:01' prior: 50559737!
listCart: aCartId 
	
	| cartSession |
	
	cartSession := cartSessions at: aCartId ifAbsent: [self error: self class invalidCartIdErrorMessage ].
	

	self assertTimeout: cartSession.
	
	^cartSession cart injectItems: (Dictionary new) into: [ :aDict :item | 
			aDict at: item put: (aDict at: item ifAbsent: [0]) + 1. aDict
		].! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 23:39:21'!
ERROR!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 23:39:21'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 23:39:21'!
ERROR!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:39:21'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutEmptyCartReturnsError stamp: 'ms 11/6/2022 23:39:21'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 23:39:21'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:39:21'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 23:39:21'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 23:39:21'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:39:21'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:39:21'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:39:21'!
PASSED!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:39:21'!
PASSED!

!testRun: #StoreInterfaceTest #test14ListPurchasesWithMultipleSalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:39:21'!
PASSED!

!testRun: #StoreInterfaceTest #test15ListPurchasesWithEmptySalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:39:21'!
PASSED!

!testRun: #StoreInterfaceTest #test16ListPurchasesWithInvalidClientIdReturnsEmptyResponse stamp: 'ms 11/6/2022 23:39:21'!
PASSED!

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 23:39:23'!
ERROR!
!Cart methodsFor: 'accessing' stamp: 'ms 11/6/2022 23:39:42'!
injectItems: aDictionary into: aBlockClosure 
	self shouldBeImplemented.! !
!Cart methodsFor: 'accessing' stamp: 'ms 11/6/2022 23:40:26' prior: 50565405!
injectItems: anInitialValue into: aBlockClosure 
	
	^items inject: anInitialValue into: aBlockClosure ! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 23:40:30'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 23:40:30'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 23:40:30'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:40:30'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutEmptyCartReturnsError stamp: 'ms 11/6/2022 23:40:31'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 23:40:31'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:40:31'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 23:40:31'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 23:40:31'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:40:31'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:40:31'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:40:31'!
PASSED!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:40:31'!
PASSED!

!testRun: #StoreInterfaceTest #test14ListPurchasesWithMultipleSalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:40:31'!
PASSED!

!testRun: #StoreInterfaceTest #test15ListPurchasesWithEmptySalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:40:31'!
PASSED!

!testRun: #StoreInterfaceTest #test16ListPurchasesWithInvalidClientIdReturnsEmptyResponse stamp: 'ms 11/6/2022 23:40:31'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 23:41:55' prior: 50563210!
listPurchasesWithId: aClientId andPassword: aPassword
	
	| allItems dictionary total |
	
	self assertCorrectClientId: aClientId andPassword: aPassword.
	
	allItems := (clientsTransactions at: aClientId ifAbsent: [OrderedCollection new]) inject: OrderedCollection new into: 
	[ :aCollection :aTransaction | aCollection addAll: aTransaction value items. aCollection ].

	dictionary := allItems 
		inject: (Dictionary new)
		into: [ :aDict :item | 
			aDict at: item put: (aDict at: item ifAbsent: [0]) + 1. aDict
		].
	
	total := (clientsTransactions at: aClientId ifAbsent: [OrderedCollection new]) inject: 0 into: [ :aSubtotal :aTransaction | aSubtotal + aTransaction value total ].
	
	^Array with: dictionary with: total	! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 23:42:50'!
purchasesForClientId: aClientId

	^ (clientsTransactions at: aClientId ifAbsent: [OrderedCollection new]) inject: OrderedCollection new into: 
	[ :aCollection :aTransaction | aCollection addAll: aTransaction value items. aCollection ]! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 23:42:50' prior: 50565475!
listPurchasesWithId: aClientId andPassword: aPassword
	
	| allItems dictionary total |
	
	self assertCorrectClientId: aClientId andPassword: aPassword.
	
	allItems := self purchasesForClientId: aClientId.

	dictionary := allItems 
		inject: (Dictionary new)
		into: [ :aDict :item | 
			aDict at: item put: (aDict at: item ifAbsent: [0]) + 1. aDict
		].
	
	total := (clientsTransactions at: aClientId ifAbsent: [OrderedCollection new]) inject: 0 into: [ :aSubtotal :aTransaction | aSubtotal + aTransaction value total ].
	
	^Array with: dictionary with: total	! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 23:43:49'!
generateDictionaryOfItemsQuantity: allItems

	^ allItems 
		inject: (Dictionary new)
		into: [ :aDict :item | 
			aDict at: item put: (aDict at: item ifAbsent: [0]) + 1. aDict
		]! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 23:43:49' prior: 50565511!
listPurchasesWithId: aClientId andPassword: aPassword
	
	| allItems dictionary total |
	
	self assertCorrectClientId: aClientId andPassword: aPassword.
	
	allItems := self purchasesForClientId: aClientId.

	dictionary := self generateDictionaryOfItemsQuantity: allItems.
	
	total := (clientsTransactions at: aClientId ifAbsent: [OrderedCollection new]) inject: 0 into: [ :aSubtotal :aTransaction | aSubtotal + aTransaction value total ].
	
	^Array with: dictionary with: total	! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 23:43:57' prior: 50565531!
generateDictionaryOfItemsQuantity: allItems

	^allItems 
		inject: (Dictionary new)
		into: [ :aDict :item | 
			aDict at: item put: (aDict at: item ifAbsent: [0]) + 1. aDict
		]! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 23:44:22'!
calculateTotalForClientId: aClientId

	^ (clientsTransactions at: aClientId ifAbsent: [OrderedCollection new]) inject: 0 into: [ :aSubtotal :aTransaction | aSubtotal + aTransaction value total ]! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 23:44:22' prior: 50565540!
listPurchasesWithId: aClientId andPassword: aPassword
	
	| allItems dictionary total |
	
	self assertCorrectClientId: aClientId andPassword: aPassword.
	
	allItems := self purchasesForClientId: aClientId.

	dictionary := self generateDictionaryOfItemsQuantity: allItems.
	
	total := self calculateTotalForClientId: aClientId.
	
	^Array with: dictionary with: total	! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 23:44:26' prior: 50565575!
listPurchasesWithId: aClientId andPassword: aPassword
	
	| allItems dictionary total |
	
	self assertCorrectClientId: aClientId andPassword: aPassword.
	
	allItems := self purchasesForClientId: aClientId.
	dictionary := self generateDictionaryOfItemsQuantity: allItems.
	total := self calculateTotalForClientId: aClientId.
	
	^Array with: dictionary with: total	! !
!Cashier methodsFor: 'checkout - private' stamp: 'ms 11/6/2022 23:49:34' prior: 50561491!
createSale

	^ Sale of: total with: (cart injectItems: OrderedCollection new into: [ :aCollection :anItem | aCollection add: anItem. aCollection ])
! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ms 11/6/2022 23:49:35'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ms 11/6/2022 23:49:35'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'ms 11/6/2022 23:49:35'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ms 11/6/2022 23:49:35'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ms 11/6/2022 23:49:35'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ms 11/6/2022 23:49:35'!
PASSED!
!Cashier methodsFor: 'checkout - private' stamp: 'ms 11/6/2022 23:49:41' prior: 50565605!
createSale

	^ Sale of: total with: 
	(cart injectItems: OrderedCollection new into: [ :aCollection :anItem | aCollection add: anItem. aCollection ])
! !
!Cashier methodsFor: 'checkout - private' stamp: 'ms 11/6/2022 23:49:47' prior: 50565633!
createSale

	^ Sale of: total 
	with: (cart injectItems: OrderedCollection new into: [ :aCollection :anItem | aCollection add: anItem. aCollection ])
! !

!methodRemoval: Cart #items stamp: 'ms 11/6/2022 23:49:52'!
items

	^items copy!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ms 11/6/2022 23:49:56'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ms 11/6/2022 23:49:56'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ms 11/6/2022 23:49:56'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ms 11/6/2022 23:49:56'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ms 11/6/2022 23:49:56'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ms 11/6/2022 23:49:56'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ms 11/6/2022 23:49:56'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ms 11/6/2022 23:49:56'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ms 11/6/2022 23:49:59'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ms 11/6/2022 23:49:59'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ms 11/6/2022 23:49:59'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ms 11/6/2022 23:49:59'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ms 11/6/2022 23:49:59'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ms 11/6/2022 23:49:59'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ms 11/6/2022 23:49:59'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ms 11/6/2022 23:49:59'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ms 11/6/2022 23:50:00'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ms 11/6/2022 23:50:00'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'ms 11/6/2022 23:50:00'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ms 11/6/2022 23:50:00'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ms 11/6/2022 23:50:00'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ms 11/6/2022 23:50:00'!
PASSED!

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 23:50:04'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 23:50:04'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 23:50:04'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:50:04'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutEmptyCartReturnsError stamp: 'ms 11/6/2022 23:50:04'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 23:50:04'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:50:04'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 23:50:04'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 23:50:04'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:50:04'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:50:04'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:50:04'!
PASSED!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:50:04'!
PASSED!

!testRun: #StoreInterfaceTest #test14ListPurchasesWithMultipleSalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:50:04'!
PASSED!

!testRun: #StoreInterfaceTest #test15ListPurchasesWithEmptySalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:50:04'!
PASSED!

!testRun: #StoreInterfaceTest #test16ListPurchasesWithInvalidClientIdReturnsEmptyResponse stamp: 'ms 11/6/2022 23:50:04'!
PASSED!
!StoreInterface methodsFor: 'private' stamp: 'ms 11/6/2022 23:51:09' prior: 50565558!
generateDictionaryOfItemsQuantity: aCollection

	^aCollection 
		inject: (Dictionary new)
		into: [ :aDict :item | 
			aDict at: item put: (aDict at: item ifAbsent: [0]) + 1. aDict
		]! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 23:52:28' prior: 50565331!
listCart: aCartId 
	
	| cartSession itemsCollection |
	
	cartSession := cartSessions at: aCartId ifAbsent: [self error: self class invalidCartIdErrorMessage ].
	

	self assertTimeout: cartSession.
	
	itemsCollection := cartSession cart injectItems: OrderedCollection new into: [ :aCollection :anItem | aCollection add: anItem . aCollection ].
	^self generateDictionaryOfItemsQuantity: itemsCollection.! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 23:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 23:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 23:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutEmptyCartReturnsError stamp: 'ms 11/6/2022 23:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 23:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 23:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 23:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test14ListPurchasesWithMultipleSalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test15ListPurchasesWithEmptySalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test16ListPurchasesWithInvalidClientIdReturnsEmptyResponse stamp: 'ms 11/6/2022 23:52:31'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 23:52:45' prior: 50565789!
listCart: aCartId 
	
	| cartSession itemsCollection |
	
	cartSession := cartSessions at: aCartId ifAbsent: [self error: self class invalidCartIdErrorMessage ].
	

	self assertTimeout: cartSession.
	
	itemsCollection := cartSession cart 
			injectItems: OrderedCollection new 
			into: [ :aCollection :anItem | aCollection add: anItem . aCollection ].
	^self generateDictionaryOfItemsQuantity: itemsCollection.! !
!StoreInterface methodsFor: 'private' stamp: 'ms 11/6/2022 23:54:04' prior: 50565780!
generateDictionaryOfItemsQuantity: anItemsContainer
	
	
	^anItemsContainer 
		inject: (Dictionary new)
		into: [ :aDict :item | 
			aDict at: item put: (aDict at: item ifAbsent: [0]) + 1. aDict
		]! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 23:54:20' prior: 50565863!
listCart: aCartId 
	
	| cartSession itemsCollection |
	
	cartSession := cartSessions at: aCartId ifAbsent: [self error: self class invalidCartIdErrorMessage ].
	

	self assertTimeout: cartSession.
	
	itemsCollection := cartSession cart .
			
	^self generateDictionaryOfItemsQuantity: itemsCollection.! !
!StoreInterface methodsFor: 'private' stamp: 'ms 11/6/2022 23:55:07' prior: 50565879!
generateDictionaryOfItemsQuantity: anItemsContainer
	
	
	^anItemsContainer 
		inject: (Dictionary new)
		into: [ :aDict :item | 
			aDict at: item put: (aDict at: item ifAbsent: [0]) + 1. aDict
		]! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 23:54:20' prior: 50565889!
listCart: aCartId 
	
	| cartSession itemsCollection |
	
	cartSession := cartSessions at: aCartId ifAbsent: [self error: self class invalidCartIdErrorMessage ].
	

	self assertTimeout: cartSession.
	
	itemsCollection := cartSession cart .
			
	^self generateDictionaryOfItemsQuantity: itemsCollection.! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 23:54:20' prior: 50565912!
listCart: aCartId 
	
	| cartSession itemsCollection |
	
	cartSession := cartSessions at: aCartId ifAbsent: [self error: self class invalidCartIdErrorMessage ].
	

	self assertTimeout: cartSession.
	
	itemsCollection := cartSession cart .
			
	^self generateDictionaryOfItemsQuantity: itemsCollection.! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/6/2022 23:52:45' prior: 50565925!
listCart: aCartId 
	
	| cartSession itemsCollection |
	
	cartSession := cartSessions at: aCartId ifAbsent: [self error: self class invalidCartIdErrorMessage ].
	

	self assertTimeout: cartSession.
	
	itemsCollection := cartSession cart 
			injectItems: OrderedCollection new 
			into: [ :aCollection :anItem | aCollection add: anItem . aCollection ].
	^self generateDictionaryOfItemsQuantity: itemsCollection.! !
!StoreInterface methodsFor: 'private' stamp: 'ms 11/6/2022 23:51:09' prior: 50565902!
generateDictionaryOfItemsQuantity: aCollection

	^aCollection 
		inject: (Dictionary new)
		into: [ :aDict :item | 
			aDict at: item put: (aDict at: item ifAbsent: [0]) + 1. aDict
		]! !

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:56:56'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 23:56:56'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:56:56'!
PASSED!

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 23:56:56'!
PASSED!

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 23:56:58'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 23:56:58'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 23:56:58'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:56:58'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutEmptyCartReturnsError stamp: 'ms 11/6/2022 23:56:58'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 23:56:59'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:56:59'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 23:56:59'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 23:56:59'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:56:59'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:56:59'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:56:59'!
PASSED!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:56:59'!
PASSED!

!testRun: #StoreInterfaceTest #test14ListPurchasesWithMultipleSalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:56:59'!
PASSED!

!testRun: #StoreInterfaceTest #test15ListPurchasesWithEmptySalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:56:59'!
PASSED!

!testRun: #StoreInterfaceTest #test16ListPurchasesWithInvalidClientIdReturnsEmptyResponse stamp: 'ms 11/6/2022 23:56:59'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:59:28' prior: 50564187!
test03AddToCartAddsItemSuccesfully

	| cartId |
	
	cartId := interface createCartWithId: testObjectsFactory validClientId andPassword: testObjectsFactory validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: -4.
	
	self assert: (interface listCart: cartId) equals: (Dictionary new add: testObjectsFactory itemSellByTheStore -> 4; yourself).! !

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 23:59:29'!
ERROR!
!StoreInterfaceTest methodsFor: 'tests' stamp: 'ms 11/6/2022 23:59:35' prior: 50566035!
test03AddToCartAddsItemSuccesfully

	| cartId |
	
	cartId := interface createCartWithId: testObjectsFactory validClientId andPassword: testObjectsFactory validClientPassword.
	interface addToCart: cartId book: testObjectsFactory itemSellByTheStore withQuantity: 4.
	
	self assert: (interface listCart: cartId) equals: (Dictionary new add: testObjectsFactory itemSellByTheStore -> 4; yourself).! !

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 23:59:36'!
PASSED!

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/6/2022 23:59:36'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/6/2022 23:59:36'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/6/2022 23:59:36'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:59:36'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutEmptyCartReturnsError stamp: 'ms 11/6/2022 23:59:36'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/6/2022 23:59:36'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/6/2022 23:59:36'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/6/2022 23:59:36'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/6/2022 23:59:36'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:59:36'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:59:36'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/6/2022 23:59:36'!
PASSED!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:59:36'!
PASSED!

!testRun: #StoreInterfaceTest #test14ListPurchasesWithMultipleSalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:59:36'!
PASSED!

!testRun: #StoreInterfaceTest #test15ListPurchasesWithEmptySalesReturnsCollectionWithTotal stamp: 'ms 11/6/2022 23:59:36'!
PASSED!

!testRun: #StoreInterfaceTest #test16ListPurchasesWithInvalidClientIdReturnsEmptyResponse stamp: 'ms 11/6/2022 23:59:36'!
PASSED!

!methodRemoval: Sale #items stamp: 'ms 11/7/2022 00:00:45'!
items
	
	^ items!

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/7/2022 00:00:47'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/7/2022 00:00:47'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/7/2022 00:00:47'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/7/2022 00:00:47'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutEmptyCartReturnsError stamp: 'ms 11/7/2022 00:00:47'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/7/2022 00:00:47'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/7/2022 00:00:47'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/7/2022 00:00:47'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/7/2022 00:00:47'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/7/2022 00:00:47'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/7/2022 00:00:47'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/7/2022 00:00:47'!
PASSED!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/7/2022 00:00:47'!
ERROR!

!testRun: #StoreInterfaceTest #test14ListPurchasesWithMultipleSalesReturnsCollectionWithTotal stamp: 'ms 11/7/2022 00:00:47'!
ERROR!

!testRun: #StoreInterfaceTest #test15ListPurchasesWithEmptySalesReturnsCollectionWithTotal stamp: 'ms 11/7/2022 00:00:47'!
PASSED!

!testRun: #StoreInterfaceTest #test16ListPurchasesWithInvalidClientIdReturnsEmptyResponse stamp: 'ms 11/7/2022 00:00:47'!
PASSED!
!StoreInterface methodsFor: 'private' stamp: 'ms 11/7/2022 00:02:36' prior: 50565500!
purchasesForClientId: aClientId

	^ (clientsTransactions at: aClientId ifAbsent: [OrderedCollection new]) inject: OrderedCollection new into: 
	[ :aCollection :aTransaction | aTransaction injectItems: aCollection into: [ :aPartialResult :items | aPartialResult addAll: items. aPartialResult ]. ]! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/7/2022 00:02:37'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/7/2022 00:02:37'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/7/2022 00:02:37'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/7/2022 00:02:37'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutEmptyCartReturnsError stamp: 'ms 11/7/2022 00:02:37'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/7/2022 00:02:37'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/7/2022 00:02:37'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/7/2022 00:02:37'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/7/2022 00:02:37'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/7/2022 00:02:37'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/7/2022 00:02:37'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/7/2022 00:02:37'!
PASSED!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/7/2022 00:02:37'!
ERROR!

!testRun: #StoreInterfaceTest #test14ListPurchasesWithMultipleSalesReturnsCollectionWithTotal stamp: 'ms 11/7/2022 00:02:37'!
ERROR!

!testRun: #StoreInterfaceTest #test15ListPurchasesWithEmptySalesReturnsCollectionWithTotal stamp: 'ms 11/7/2022 00:02:37'!
PASSED!

!testRun: #StoreInterfaceTest #test16ListPurchasesWithInvalidClientIdReturnsEmptyResponse stamp: 'ms 11/7/2022 00:02:37'!
PASSED!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/7/2022 00:02:39'!
ERROR!
!StoreInterface methodsFor: 'private' stamp: 'ms 11/7/2022 00:02:50' prior: 50566191!
purchasesForClientId: aClientId

	^ (clientsTransactions at: aClientId ifAbsent: [OrderedCollection new]) inject: OrderedCollection new into: 
	[ :aCollection :aTransaction | aTransaction value injectItems: aCollection into: [ :aPartialResult :items | aPartialResult addAll: items. aPartialResult ]. ]! !
!Sale methodsFor: 'total' stamp: 'ms 11/7/2022 00:03:03'!
injectItems: anInitialValue into: aBlockClosure 
	
	^items inject: anInitialValue into: aBlockClosure ! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/7/2022 00:03:09'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/7/2022 00:03:09'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/7/2022 00:03:09'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/7/2022 00:03:09'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutEmptyCartReturnsError stamp: 'ms 11/7/2022 00:03:09'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/7/2022 00:03:09'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/7/2022 00:03:09'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/7/2022 00:03:09'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/7/2022 00:03:09'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/7/2022 00:03:09'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/7/2022 00:03:09'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/7/2022 00:03:09'!
PASSED!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/7/2022 00:03:09'!
FAILURE!

!testRun: #StoreInterfaceTest #test14ListPurchasesWithMultipleSalesReturnsCollectionWithTotal stamp: 'ms 11/7/2022 00:03:09'!
FAILURE!

!testRun: #StoreInterfaceTest #test15ListPurchasesWithEmptySalesReturnsCollectionWithTotal stamp: 'ms 11/7/2022 00:03:09'!
PASSED!

!testRun: #StoreInterfaceTest #test16ListPurchasesWithInvalidClientIdReturnsEmptyResponse stamp: 'ms 11/7/2022 00:03:09'!
PASSED!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/7/2022 00:03:10'!
FAILURE!
!StoreInterface methodsFor: 'private' stamp: 'ms 11/7/2022 00:04:41' prior: 50566265!
purchasesForClientId: aClientId

	^ (clientsTransactions at: aClientId ifAbsent: [OrderedCollection new]) 
		inject: OrderedCollection new 
		into: [ :aCollection :aTransaction | 
			aTransaction value 
				injectItems: aCollection 
				into: [ :aPartialResult :items | aPartialResult addAll: items. aPartialResult ]. 
			]! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/7/2022 00:04:43'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/7/2022 00:04:43'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/7/2022 00:04:43'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/7/2022 00:04:43'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutEmptyCartReturnsError stamp: 'ms 11/7/2022 00:04:43'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/7/2022 00:04:43'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/7/2022 00:04:43'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/7/2022 00:04:43'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/7/2022 00:04:43'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/7/2022 00:04:43'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/7/2022 00:04:43'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/7/2022 00:04:43'!
PASSED!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/7/2022 00:04:43'!
FAILURE!

!testRun: #StoreInterfaceTest #test14ListPurchasesWithMultipleSalesReturnsCollectionWithTotal stamp: 'ms 11/7/2022 00:04:43'!
FAILURE!

!testRun: #StoreInterfaceTest #test15ListPurchasesWithEmptySalesReturnsCollectionWithTotal stamp: 'ms 11/7/2022 00:04:43'!
PASSED!

!testRun: #StoreInterfaceTest #test16ListPurchasesWithInvalidClientIdReturnsEmptyResponse stamp: 'ms 11/7/2022 00:04:43'!
PASSED!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/7/2022 00:04:46'!
FAILURE!
!StoreInterface methodsFor: 'private' stamp: 'ms 11/7/2022 00:06:29' prior: 50566345!
purchasesForClientId: aClientId

	^ (clientsTransactions at: aClientId ifAbsent: [OrderedCollection new]) 
		inject: OrderedCollection new 
		into: [ :aCollection :aTransaction | 
			aTransaction value 
				injectItems: aCollection 
				into: [ :aPartialResult :anItem | aPartialResult add: anItem. aPartialResult ]. 
			]! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/7/2022 00:06:30'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/7/2022 00:06:30'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/7/2022 00:06:30'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/7/2022 00:06:30'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutEmptyCartReturnsError stamp: 'ms 11/7/2022 00:06:30'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/7/2022 00:06:30'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/7/2022 00:06:30'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/7/2022 00:06:30'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/7/2022 00:06:30'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/7/2022 00:06:30'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/7/2022 00:06:30'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/7/2022 00:06:30'!
PASSED!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/7/2022 00:06:30'!
PASSED!

!testRun: #StoreInterfaceTest #test14ListPurchasesWithMultipleSalesReturnsCollectionWithTotal stamp: 'ms 11/7/2022 00:06:30'!
PASSED!

!testRun: #StoreInterfaceTest #test15ListPurchasesWithEmptySalesReturnsCollectionWithTotal stamp: 'ms 11/7/2022 00:06:30'!
PASSED!

!testRun: #StoreInterfaceTest #test16ListPurchasesWithInvalidClientIdReturnsEmptyResponse stamp: 'ms 11/7/2022 00:06:30'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/7/2022 00:08:51' prior: 50561375!
checkOutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| creditCard cashier cartSession |
	
	self assertValidCco: aCco.
	
	cartSession := cartSessions at: aCartId ifAbsent: [ self error: self class invalidCartIdErrorMessage ].
	self assertTimeout: cartSession.
	
	creditCard := CreditCard expiringOn: aCced withCcn: aCcn andCco: aCco.
	cashier := Cashier toCheckout: cartSession cart charging: creditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook .
	
	cashier checkOut.
	
	(clientsTransactions at: cartSession clientId 
	ifAbsent: [clientsTransactions at: cartSession clientId put: OrderedCollection new]) add: self generateRandomId -> salesBook last.
	^(clientsTransactions at: cartSession clientId ) last key
	! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/7/2022 00:09:32' prior: 50566491!
checkOutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| creditCard cashier cartSession |
	
	self assertValidCco: aCco.
	
	cartSession := self getCartSessionForCartId: aCartId.
	creditCard := CreditCard expiringOn: aCced withCcn: aCcn andCco: aCco.
	cashier := Cashier toCheckout: cartSession cart charging: creditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook .
	
	cashier checkOut.
	
	(clientsTransactions at: cartSession clientId 
	ifAbsent: [clientsTransactions at: cartSession clientId put: OrderedCollection new]) add: self generateRandomId -> salesBook last.
	^(clientsTransactions at: cartSession clientId ) last key
	! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/7/2022 00:09:36'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/7/2022 00:09:36'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/7/2022 00:09:36'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/7/2022 00:09:36'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutEmptyCartReturnsError stamp: 'ms 11/7/2022 00:09:36'!
ERROR!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/7/2022 00:09:36'!
ERROR!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/7/2022 00:09:36'!
ERROR!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/7/2022 00:09:36'!
ERROR!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/7/2022 00:09:36'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/7/2022 00:09:36'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/7/2022 00:09:36'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/7/2022 00:09:36'!
ERROR!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/7/2022 00:09:36'!
ERROR!

!testRun: #StoreInterfaceTest #test14ListPurchasesWithMultipleSalesReturnsCollectionWithTotal stamp: 'ms 11/7/2022 00:09:36'!
ERROR!

!testRun: #StoreInterfaceTest #test15ListPurchasesWithEmptySalesReturnsCollectionWithTotal stamp: 'ms 11/7/2022 00:09:36'!
PASSED!

!testRun: #StoreInterfaceTest #test16ListPurchasesWithInvalidClientIdReturnsEmptyResponse stamp: 'ms 11/7/2022 00:09:36'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutEmptyCartReturnsError stamp: 'ms 11/7/2022 00:09:38'!
ERROR!
!StoreInterface methodsFor: 'private' stamp: 'ms 11/7/2022 00:09:43'!
getCartSessionForCartId: aSmallInteger 
	self shouldBeImplemented.! !
!StoreInterface methodsFor: 'private' stamp: 'ms 11/7/2022 00:10:13' prior: 50566603!
getCartSessionForCartId: aCartId 
	
	| cartSession |
	cartSession := cartSessions at: aCartId ifAbsent: [ self error: self class invalidCartIdErrorMessage ].
	self assertTimeout: cartSession.
	
	^cartSession
	! !
!StoreInterface methodsFor: 'private' stamp: 'ms 11/7/2022 00:10:18' prior: 50566608!
getCartSessionForCartId: aCartId 
	
	| cartSession |
	
	cartSession := cartSessions at: aCartId ifAbsent: [ self error: self class invalidCartIdErrorMessage ].
	self assertTimeout: cartSession.
	
	^cartSession
	! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/7/2022 00:10:43' prior: 50560148!
addToCart: aCartId book: aBook withQuantity: aQuantity 
	|cartSession|
	cartSession := self getCartSessionForCartId: aCartId.
	cartSession cart add: aQuantity of: aBook.! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/7/2022 00:10:58' prior: 50565938!
listCart: aCartId 
	
	| cartSession itemsCollection |
	
	cartSession := self getCartSessionForCartId: aCartId.
	itemsCollection := cartSession cart 
			injectItems: OrderedCollection new 
			into: [ :aCollection :anItem | aCollection add: anItem . aCollection ].
	^self generateDictionaryOfItemsQuantity: itemsCollection.! !

!testRun: #StoreInterfaceTest #test01ValidIdAndPasswordCreatesCartSuccessfully stamp: 'ms 11/7/2022 00:10:59'!
PASSED!

!testRun: #StoreInterfaceTest #test02InvalidIdAndPasswordThrowsError stamp: 'ms 11/7/2022 00:10:59'!
PASSED!

!testRun: #StoreInterfaceTest #test03AddToCartAddsItemSuccesfully stamp: 'ms 11/7/2022 00:10:59'!
PASSED!

!testRun: #StoreInterfaceTest #test04TryingToListInvalidCartIdThrowsError stamp: 'ms 11/7/2022 00:10:59'!
PASSED!

!testRun: #StoreInterfaceTest #test05CheckoutEmptyCartReturnsError stamp: 'ms 11/7/2022 00:10:59'!
PASSED!

!testRun: #StoreInterfaceTest #test06CheckoutWithInvalidCcnThrowsError stamp: 'ms 11/7/2022 00:10:59'!
PASSED!

!testRun: #StoreInterfaceTest #test07CheckoutWithInvalidCartIdThrowsError stamp: 'ms 11/7/2022 00:10:59'!
PASSED!

!testRun: #StoreInterfaceTest #test08CheckoutWithInvalidCcedThrowsError stamp: 'ms 11/7/2022 00:10:59'!
PASSED!

!testRun: #StoreInterfaceTest #test09CheckoutWithInvalidCcoThrowsError stamp: 'ms 11/7/2022 00:10:59'!
PASSED!

!testRun: #StoreInterfaceTest #test10AddToCartInvalidAfter31Minutes stamp: 'ms 11/7/2022 00:11:00'!
PASSED!

!testRun: #StoreInterfaceTest #test11ListCartInvalidAfter31Minutes stamp: 'ms 11/7/2022 00:11:00'!
PASSED!

!testRun: #StoreInterfaceTest #test12CheckoutCartInvalidAfter31Minutes stamp: 'ms 11/7/2022 00:11:00'!
PASSED!

!testRun: #StoreInterfaceTest #test13ListPurchasesReturnsCollectionWithTotal stamp: 'ms 11/7/2022 00:11:00'!
PASSED!

!testRun: #StoreInterfaceTest #test14ListPurchasesWithMultipleSalesReturnsCollectionWithTotal stamp: 'ms 11/7/2022 00:11:00'!
PASSED!

!testRun: #StoreInterfaceTest #test15ListPurchasesWithEmptySalesReturnsCollectionWithTotal stamp: 'ms 11/7/2022 00:11:00'!
PASSED!

!testRun: #StoreInterfaceTest #test16ListPurchasesWithInvalidClientIdReturnsEmptyResponse stamp: 'ms 11/7/2022 00:11:00'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/7/2022 00:12:11'!
registerClientTransaction: cartSession

	^ (clientsTransactions at: cartSession clientId 
	ifAbsent: [clientsTransactions at: cartSession clientId put: OrderedCollection new]) add: self generateRandomId -> salesBook last! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/7/2022 00:12:11' prior: 50566518!
checkOutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| creditCard cashier cartSession |
	
	self assertValidCco: aCco.
	
	cartSession := self getCartSessionForCartId: aCartId.
	creditCard := CreditCard expiringOn: aCced withCcn: aCcn andCco: aCco.
	cashier := Cashier toCheckout: cartSession cart charging: creditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook .
	
	cashier checkOut.
	
	self registerClientTransaction: cartSession.
	^(clientsTransactions at: cartSession clientId ) last key
	! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/7/2022 00:12:46' prior: 50566718!
checkOutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| creditCard cashier cartSession |
	
	self assertValidCco: aCco.
	
	cartSession := self getCartSessionForCartId: aCartId.
	creditCard := CreditCard expiringOn: aCced withCcn: aCcn andCco: aCco.
	cashier := Cashier toCheckout: cartSession cart charging: creditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook .
	
	cashier checkOut.
	
	self registerClientTransaction: cartSession.
	^(clientsTransactions at: cartSession clientId) last key
	! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/7/2022 00:12:51' prior: 50566738!
checkOutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| creditCard cashier cartSession |
	
	self assertValidCco: aCco.
	
	cartSession := self getCartSessionForCartId: aCartId.
	creditCard := CreditCard expiringOn: aCced withCcn: aCcn andCco: aCco.
	cashier := Cashier toCheckout: cartSession cart charging: creditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook .
	
	cashier checkOut.
	
	self registerClientTransaction: cartSession.
	^(clientsTransactions at: cartSession clientId) last key.
	! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/7/2022 00:13:22' prior: 50566758!
checkOutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| creditCard cashier cartSession |
	
	self assertValidCco: aCco.
	
	cartSession := self getCartSessionForCartId: aCartId.
	creditCard := CreditCard expiringOn: aCced withCcn: aCcn andCco: aCco.
	cashier := Cashier toCheckout: cartSession cart charging: creditCard throught: merchantProcessor on: clockService now registeringOn: salesBook .
	
	cashier checkOut.
	
	self registerClientTransaction: cartSession.
	^(clientsTransactions at: cartSession clientId) last key.
	! !
!StoreInterface methodsFor: 'interface' stamp: 'ms 11/7/2022 00:13:33' prior: 50566778!
checkOutCart: aCartId withCcn: aCcn withCced: aCced withCco: aCco 
	
	| creditCard cashier cartSession |
	
	self assertValidCco: aCco.
	
	cartSession := self getCartSessionForCartId: aCartId.
	creditCard := CreditCard expiringOn: aCced withCcn: aCcn andCco: aCco.
	cashier := Cashier toCheckout: cartSession cart 
					charging: creditCard 
					throught: merchantProcessor 
					on: clockService now 
					registeringOn: salesBook .
	
	cashier checkOut.
	
	self registerClientTransaction: cartSession.
	^(clientsTransactions at: cartSession clientId) last key.
	! !